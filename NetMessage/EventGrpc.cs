// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Suresecureivs {
  /// <summary>
  ///  The greeting service definition.
  /// </summary>
  public static class EventReporting
  {
    static readonly string __ServiceName = "suresecureivs.EventReporting";

    static readonly Marshaller<global::Suresecureivs.Event> __Marshaller_Event = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.Event.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.ReportEventReply> __Marshaller_ReportEventReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.ReportEventReply.Parser.ParseFrom);

    static readonly Method<global::Suresecureivs.Event, global::Suresecureivs.ReportEventReply> __Method_ReportEvent = new Method<global::Suresecureivs.Event, global::Suresecureivs.ReportEventReply>(
        MethodType.Unary,
        __ServiceName,
        "ReportEvent",
        __Marshaller_Event,
        __Marshaller_ReportEventReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Suresecureivs.EventReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EventReporting</summary>
    public abstract class EventReportingBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.ReportEventReply> ReportEvent(global::Suresecureivs.Event request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EventReporting</summary>
    public class EventReportingClient : ClientBase<EventReportingClient>
    {
      /// <summary>Creates a new client for EventReporting</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EventReportingClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EventReporting that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EventReportingClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EventReportingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EventReportingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Suresecureivs.ReportEventReply ReportEvent(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Suresecureivs.ReportEventReply ReportEvent(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportEvent, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Suresecureivs.ReportEventReply> ReportEventAsync(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Suresecureivs.ReportEventReply> ReportEventAsync(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportEvent, null, options, request);
      }
      protected override EventReportingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EventReportingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(EventReportingBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReportEvent, serviceImpl.ReportEvent).Build();
    }

  }
}
#endregion
