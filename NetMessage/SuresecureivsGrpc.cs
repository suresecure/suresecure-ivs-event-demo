// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suresecureivs.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Suresecureivs {
  /// <summary>
  ///  The device management service definition.
  /// </summary>
  public static class DeviceMgt
  {
    static readonly string __ServiceName = "suresecureivs.DeviceMgt";

    static readonly Marshaller<global::Suresecureivs.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GeneralReply> __Marshaller_GeneralReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GeneralReply.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.NetworkEndpoint> __Marshaller_NetworkEndpoint = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.NetworkEndpoint.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GetDeviceInfoRequest> __Marshaller_GetDeviceInfoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GetDeviceInfoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GetDeviceInfoReply> __Marshaller_GetDeviceInfoReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GetDeviceInfoReply.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.NetworkConf> __Marshaller_NetworkConf = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.NetworkConf.Parser.ParseFrom);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply> __Method_GetHealthyStatus = new Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "GetHealthyStatus",
        __Marshaller_Empty,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.NetworkEndpoint> __Method_GetEventServerAddress = new Method<global::Suresecureivs.Empty, global::Suresecureivs.NetworkEndpoint>(
        MethodType.Unary,
        __ServiceName,
        "GetEventServerAddress",
        __Marshaller_Empty,
        __Marshaller_NetworkEndpoint);

    static readonly Method<global::Suresecureivs.NetworkEndpoint, global::Suresecureivs.GeneralReply> __Method_SetEventServerAddress = new Method<global::Suresecureivs.NetworkEndpoint, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "SetEventServerAddress",
        __Marshaller_NetworkEndpoint,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.GetDeviceInfoRequest, global::Suresecureivs.GetDeviceInfoReply> __Method_GetDeviceInfo = new Method<global::Suresecureivs.GetDeviceInfoRequest, global::Suresecureivs.GetDeviceInfoReply>(
        MethodType.Unary,
        __ServiceName,
        "GetDeviceInfo",
        __Marshaller_GetDeviceInfoRequest,
        __Marshaller_GetDeviceInfoReply);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.NetworkConf> __Method_GetNetworkConf = new Method<global::Suresecureivs.Empty, global::Suresecureivs.NetworkConf>(
        MethodType.Unary,
        __ServiceName,
        "GetNetworkConf",
        __Marshaller_Empty,
        __Marshaller_NetworkConf);

    static readonly Method<global::Suresecureivs.NetworkConf, global::Suresecureivs.GeneralReply> __Method_SetNetworkConf = new Method<global::Suresecureivs.NetworkConf, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "SetNetworkConf",
        __Marshaller_NetworkConf,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply> __Method_Reboot = new Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "Reboot",
        __Marshaller_Empty,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply> __Method_Restart = new Method<global::Suresecureivs.Empty, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "Restart",
        __Marshaller_Empty,
        __Marshaller_GeneralReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DeviceMgt</summary>
    public abstract class DeviceMgtBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> GetHealthyStatus(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.NetworkEndpoint> GetEventServerAddress(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> SetEventServerAddress(global::Suresecureivs.NetworkEndpoint request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc SetImageAnalysisServerAddress(NetworkEndpoint) returns (GeneralReply){}
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GetDeviceInfoReply> GetDeviceInfo(global::Suresecureivs.GetDeviceInfoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.NetworkConf> GetNetworkConf(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> SetNetworkConf(global::Suresecureivs.NetworkConf request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> Reboot(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> Restart(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DeviceMgt</summary>
    public class DeviceMgtClient : ClientBase<DeviceMgtClient>
    {
      /// <summary>Creates a new client for DeviceMgt</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DeviceMgtClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeviceMgt that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DeviceMgtClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DeviceMgtClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DeviceMgtClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Suresecureivs.GeneralReply GetHealthyStatus(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHealthyStatus(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply GetHealthyStatus(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealthyStatus, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> GetHealthyStatusAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHealthyStatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> GetHealthyStatusAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealthyStatus, null, options, request);
      }
      public virtual global::Suresecureivs.NetworkEndpoint GetEventServerAddress(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetEventServerAddress(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.NetworkEndpoint GetEventServerAddress(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEventServerAddress, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NetworkEndpoint> GetEventServerAddressAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetEventServerAddressAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NetworkEndpoint> GetEventServerAddressAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEventServerAddress, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply SetEventServerAddress(global::Suresecureivs.NetworkEndpoint request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetEventServerAddress(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply SetEventServerAddress(global::Suresecureivs.NetworkEndpoint request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetEventServerAddress, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetEventServerAddressAsync(global::Suresecureivs.NetworkEndpoint request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetEventServerAddressAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetEventServerAddressAsync(global::Suresecureivs.NetworkEndpoint request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetEventServerAddress, null, options, request);
      }
      /// <summary>
      /// rpc SetImageAnalysisServerAddress(NetworkEndpoint) returns (GeneralReply){}
      /// </summary>
      public virtual global::Suresecureivs.GetDeviceInfoReply GetDeviceInfo(global::Suresecureivs.GetDeviceInfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDeviceInfo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc SetImageAnalysisServerAddress(NetworkEndpoint) returns (GeneralReply){}
      /// </summary>
      public virtual global::Suresecureivs.GetDeviceInfoReply GetDeviceInfo(global::Suresecureivs.GetDeviceInfoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceInfo, null, options, request);
      }
      /// <summary>
      /// rpc SetImageAnalysisServerAddress(NetworkEndpoint) returns (GeneralReply){}
      /// </summary>
      public virtual AsyncUnaryCall<global::Suresecureivs.GetDeviceInfoReply> GetDeviceInfoAsync(global::Suresecureivs.GetDeviceInfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDeviceInfoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc SetImageAnalysisServerAddress(NetworkEndpoint) returns (GeneralReply){}
      /// </summary>
      public virtual AsyncUnaryCall<global::Suresecureivs.GetDeviceInfoReply> GetDeviceInfoAsync(global::Suresecureivs.GetDeviceInfoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceInfo, null, options, request);
      }
      public virtual global::Suresecureivs.NetworkConf GetNetworkConf(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNetworkConf(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.NetworkConf GetNetworkConf(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetworkConf, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NetworkConf> GetNetworkConfAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNetworkConfAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NetworkConf> GetNetworkConfAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetworkConf, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply SetNetworkConf(global::Suresecureivs.NetworkConf request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNetworkConf(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply SetNetworkConf(global::Suresecureivs.NetworkConf request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNetworkConf, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetNetworkConfAsync(global::Suresecureivs.NetworkConf request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNetworkConfAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetNetworkConfAsync(global::Suresecureivs.NetworkConf request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNetworkConf, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply Reboot(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Reboot(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply Reboot(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reboot, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RebootAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RebootAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RebootAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reboot, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply Restart(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Restart(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply Restart(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Restart, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RestartAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RestartAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RestartAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Restart, null, options, request);
      }
      protected override DeviceMgtClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeviceMgtClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DeviceMgtBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetHealthyStatus, serviceImpl.GetHealthyStatus)
          .AddMethod(__Method_GetEventServerAddress, serviceImpl.GetEventServerAddress)
          .AddMethod(__Method_SetEventServerAddress, serviceImpl.SetEventServerAddress)
          .AddMethod(__Method_GetDeviceInfo, serviceImpl.GetDeviceInfo)
          .AddMethod(__Method_GetNetworkConf, serviceImpl.GetNetworkConf)
          .AddMethod(__Method_SetNetworkConf, serviceImpl.SetNetworkConf)
          .AddMethod(__Method_Reboot, serviceImpl.Reboot)
          .AddMethod(__Method_Restart, serviceImpl.Restart).Build();
    }

  }
  public static class SurvCenterService
  {
    static readonly string __ServiceName = "suresecureivs.SurvCenterService";

    static readonly Marshaller<global::Suresecureivs.Event> __Marshaller_Event = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.Event.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GeneralReply> __Marshaller_GeneralReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GeneralReply.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.HeartbeatRequest> __Marshaller_HeartbeatRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.HeartbeatRequest.Parser.ParseFrom);

    static readonly Method<global::Suresecureivs.Event, global::Suresecureivs.GeneralReply> __Method_ReportEvent = new Method<global::Suresecureivs.Event, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "ReportEvent",
        __Marshaller_Event,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.HeartbeatRequest, global::Suresecureivs.GeneralReply> __Method_Heartbeat = new Method<global::Suresecureivs.HeartbeatRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "Heartbeat",
        __Marshaller_HeartbeatRequest,
        __Marshaller_GeneralReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of SurvCenterService</summary>
    public abstract class SurvCenterServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> ReportEvent(global::Suresecureivs.Event request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> Heartbeat(global::Suresecureivs.HeartbeatRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SurvCenterService</summary>
    public class SurvCenterServiceClient : ClientBase<SurvCenterServiceClient>
    {
      /// <summary>Creates a new client for SurvCenterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SurvCenterServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SurvCenterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SurvCenterServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SurvCenterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SurvCenterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Suresecureivs.GeneralReply ReportEvent(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply ReportEvent(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportEvent, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReportEventAsync(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReportEventAsync(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportEvent, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply Heartbeat(global::Suresecureivs.HeartbeatRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Heartbeat(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply Heartbeat(global::Suresecureivs.HeartbeatRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Heartbeat, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> HeartbeatAsync(global::Suresecureivs.HeartbeatRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HeartbeatAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> HeartbeatAsync(global::Suresecureivs.HeartbeatRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Heartbeat, null, options, request);
      }
      protected override SurvCenterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SurvCenterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SurvCenterServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReportEvent, serviceImpl.ReportEvent)
          .AddMethod(__Method_Heartbeat, serviceImpl.Heartbeat).Build();
    }

  }
  /// <summary>
  ///  The analytic service definition.
  /// </summary>
  public static class Analytics
  {
    static readonly string __ServiceName = "suresecureivs.Analytics";

    static readonly Marshaller<global::Suresecureivs.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.NodeDesc> __Marshaller_NodeDesc = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.NodeDesc.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.ReinitRequest> __Marshaller_ReinitRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.ReinitRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GeneralReply> __Marshaller_GeneralReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GeneralReply.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.SetModuleStatusRequest> __Marshaller_SetModuleStatusRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.SetModuleStatusRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.SetModulePeriodDurationRequest> __Marshaller_SetModulePeriodDurationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.SetModulePeriodDurationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.SetTarget> __Marshaller_SetTarget = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.SetTarget.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.SetParamRequest> __Marshaller_SetParamRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.SetParamRequest.Parser.ParseFrom);

    static readonly Method<global::Suresecureivs.Empty, global::Suresecureivs.NodeDesc> __Method_GetNodeDesc = new Method<global::Suresecureivs.Empty, global::Suresecureivs.NodeDesc>(
        MethodType.Unary,
        __ServiceName,
        "GetNodeDesc",
        __Marshaller_Empty,
        __Marshaller_NodeDesc);

    static readonly Method<global::Suresecureivs.ReinitRequest, global::Suresecureivs.GeneralReply> __Method_Reinit = new Method<global::Suresecureivs.ReinitRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "Reinit",
        __Marshaller_ReinitRequest,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.SetModuleStatusRequest, global::Suresecureivs.GeneralReply> __Method_SetModuleStatus = new Method<global::Suresecureivs.SetModuleStatusRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "SetModuleStatus",
        __Marshaller_SetModuleStatusRequest,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.SetModulePeriodDurationRequest, global::Suresecureivs.GeneralReply> __Method_SetModulePeriodDuration = new Method<global::Suresecureivs.SetModulePeriodDurationRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "SetModulePeriodDuration",
        __Marshaller_SetModulePeriodDurationRequest,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.SetTarget, global::Suresecureivs.GeneralReply> __Method_ForceModuleCurrentWorkPeriod = new Method<global::Suresecureivs.SetTarget, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "ForceModuleCurrentWorkPeriod",
        __Marshaller_SetTarget,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.SetTarget, global::Suresecureivs.GeneralReply> __Method_RestoreModuleCurrentWorkPeriod = new Method<global::Suresecureivs.SetTarget, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "RestoreModuleCurrentWorkPeriod",
        __Marshaller_SetTarget,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.SetParamRequest, global::Suresecureivs.GeneralReply> __Method_SetParam = new Method<global::Suresecureivs.SetParamRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "SetParam",
        __Marshaller_SetParamRequest,
        __Marshaller_GeneralReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Analytics</summary>
    public abstract class AnalyticsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.NodeDesc> GetNodeDesc(global::Suresecureivs.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> Reinit(global::Suresecureivs.ReinitRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> SetModuleStatus(global::Suresecureivs.SetModuleStatusRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> SetModulePeriodDuration(global::Suresecureivs.SetModulePeriodDurationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> ForceModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> RestoreModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> SetParam(global::Suresecureivs.SetParamRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Analytics</summary>
    public class AnalyticsClient : ClientBase<AnalyticsClient>
    {
      /// <summary>Creates a new client for Analytics</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AnalyticsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Analytics that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AnalyticsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AnalyticsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AnalyticsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Suresecureivs.NodeDesc GetNodeDesc(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodeDesc(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.NodeDesc GetNodeDesc(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeDesc, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NodeDesc> GetNodeDescAsync(global::Suresecureivs.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodeDescAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.NodeDesc> GetNodeDescAsync(global::Suresecureivs.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeDesc, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply Reinit(global::Suresecureivs.ReinitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Reinit(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply Reinit(global::Suresecureivs.ReinitRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reinit, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReinitAsync(global::Suresecureivs.ReinitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReinitAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReinitAsync(global::Suresecureivs.ReinitRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reinit, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply SetModuleStatus(global::Suresecureivs.SetModuleStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetModuleStatus(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply SetModuleStatus(global::Suresecureivs.SetModuleStatusRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetModuleStatus, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetModuleStatusAsync(global::Suresecureivs.SetModuleStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetModuleStatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetModuleStatusAsync(global::Suresecureivs.SetModuleStatusRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetModuleStatus, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply SetModulePeriodDuration(global::Suresecureivs.SetModulePeriodDurationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetModulePeriodDuration(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply SetModulePeriodDuration(global::Suresecureivs.SetModulePeriodDurationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetModulePeriodDuration, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetModulePeriodDurationAsync(global::Suresecureivs.SetModulePeriodDurationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetModulePeriodDurationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetModulePeriodDurationAsync(global::Suresecureivs.SetModulePeriodDurationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetModulePeriodDuration, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply ForceModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ForceModuleCurrentWorkPeriod(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply ForceModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ForceModuleCurrentWorkPeriod, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ForceModuleCurrentWorkPeriodAsync(global::Suresecureivs.SetTarget request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ForceModuleCurrentWorkPeriodAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ForceModuleCurrentWorkPeriodAsync(global::Suresecureivs.SetTarget request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ForceModuleCurrentWorkPeriod, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply RestoreModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RestoreModuleCurrentWorkPeriod(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply RestoreModuleCurrentWorkPeriod(global::Suresecureivs.SetTarget request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreModuleCurrentWorkPeriod, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RestoreModuleCurrentWorkPeriodAsync(global::Suresecureivs.SetTarget request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RestoreModuleCurrentWorkPeriodAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> RestoreModuleCurrentWorkPeriodAsync(global::Suresecureivs.SetTarget request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreModuleCurrentWorkPeriod, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply SetParam(global::Suresecureivs.SetParamRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetParam(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply SetParam(global::Suresecureivs.SetParamRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetParam, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetParamAsync(global::Suresecureivs.SetParamRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetParamAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> SetParamAsync(global::Suresecureivs.SetParamRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetParam, null, options, request);
      }
      protected override AnalyticsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AnalyticsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(AnalyticsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNodeDesc, serviceImpl.GetNodeDesc)
          .AddMethod(__Method_Reinit, serviceImpl.Reinit)
          .AddMethod(__Method_SetModuleStatus, serviceImpl.SetModuleStatus)
          .AddMethod(__Method_SetModulePeriodDuration, serviceImpl.SetModulePeriodDuration)
          .AddMethod(__Method_ForceModuleCurrentWorkPeriod, serviceImpl.ForceModuleCurrentWorkPeriod)
          .AddMethod(__Method_RestoreModuleCurrentWorkPeriod, serviceImpl.RestoreModuleCurrentWorkPeriod)
          .AddMethod(__Method_SetParam, serviceImpl.SetParam).Build();
    }

  }
}
#endregion
