// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlatPtoCode.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlatPtoCode {

  /// <summary>Holder for reflection information generated from PlatPtoCode.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PlatPtoCodeReflection {

    #region Descriptor
    /// <summary>File descriptor for PlatPtoCode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlatPtoCodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQbGF0UHRvQ29kZS5wcm90bxILUGxhdFB0b0NvZGUiqAEKCVB0b1Rhcmdl",
            "dBIJCgFYGAEgASgFEgkKAVkYAiABKAUSDQoFV2lkdGgYAyABKAUSDgoGSGVp",
            "Z2h0GAQgASgFEg8KB0NvbmZWYWwYBSABKAUSLgoKVGFyZ2V0VHlwZRgGIAEo",
            "DjIaLlBsYXRQdG9Db2RlLlB0b1RhcmdldFR5cGUSEQoJQW5uZXhEYXRhGAcg",
            "ASgJEhIKCkNvbmZSZXN1bHQYCCABKAgiZwoIUHRvSW1hZ2USCwoDS2V5GAEg",
            "ASgJEhIKCkFsYXJtSW1hZ2UYAiABKAwSJwoHVGFyZ2V0cxgDIAMoCzIWLlBs",
            "YXRQdG9Db2RlLlB0b1RhcmdldBIRCglBbm5leERhdGEYBCABKAki7AMKCFB0",
            "b0V2ZW50EgoKAklEGAEgASgFEgwKBEd1aWQYAiABKAkSDgoGSG9zdElQGAMg",
            "ASgJEg8KB0NoYW5uZWwYBCABKAUSDgoGSW5Qb3J0GAUgASgFEhIKCkhhcHBl",
            "blRpbWUYBiABKAkSEQoJQWxhcm1UeXBlGAcgASgFEioKC0FsYXJtSW1hZ2Vz",
            "GAggAygLMhUuUGxhdFB0b0NvZGUuUHRvSW1hZ2USEwoLRGVzY3JpcHRpb24Y",
            "CSABKAkSEwoLUmVsYXRlVmlkZW8YCiABKAkSEwoLUmVsYXRlVm9pY2UYCyAB",
            "KAkSFQoNRGV2aWNlVmVyc2lvbhgMIAEoCRITCgtQZXJzb25Db3VudBgNIAEo",
            "BRIRCglBbm5leERhdGEYDiABKAkSEgoKSXNWZXJpZmllZBgPIAEoCBIRCglW",
            "ZXJSZXN1bHQYECABKAgSEAoIU2F2ZVBhdGgYESABKAkSEwoLUmVjZWl2ZVRp",
            "bWUYEiABKAkSEgoKSGFuZGxlVGltZRgTIAEoCRIOCgZSZW1hcmsYFCABKAkS",
            "LgoKRXZlbnRTdGF0ZRgVIAEoDjIaLlBsYXRQdG9Db2RlLlB0b0V2ZW50U3Rh",
            "dGUSEQoJSG9zdElkZW50GBYgASgJEg8KB1RpbWVvdXQYFyABKAUiyAEKDlB0",
            "b0V2ZW50UmVzdWx0EgoKAklEGAEgASgFEgwKBEd1aWQYAiABKAkSDgoGVXNl",
            "cklkGAMgASgFEhIKCk5leHRVc2VySWQYBCABKAUSEwoLUmVjZWl2ZVRpbWUY",
            "BSABKAkSEgoKSGFuZGxlVGltZRgGIAEoCRIOCgZSZW1hcmsYByABKAkSEQoJ",
            "QW5uZXhEYXRhGAggASgJEiwKB09wZXJhdGUYCSABKA4yGy5QbGF0UHRvQ29k",
            "ZS5QdG9PcGVyYXRlVHlwZSIxCglQdG9SZXR1cm4SEQoJRXJyb3JDb2RlGAEg",
            "ASgFEhEKCUFubmV4RGF0YRgCIAEoCSJFCgxQdG9Mb2dpbkluZm8SEAoIVXNl",
            "ck5hbWUYASABKAkSEAoIUGFzc3dvcmQYAiABKAkSEQoJQW5uZXhEYXRhGAMg",
            "ASgJIkIKCVB0b0xvZ291dBIQCghVc2VyTmFtZRgBIAEoCRIQCghQYXNzd29y",
            "ZBgCIAEoCRIRCglBbm5leERhdGEYAyABKAki8AEKDlB0b0xvZ2luUmV0dXJu",
            "Eg4KBlJlc3VsdBgBIAEoCBIRCglFcnJvckNvZGUYAiABKAUSEQoJQW5uZXhE",
            "YXRhGAMgASgJEg4KBkRCSG9zdBgEIAEoCRIOCgZEQlBvcnQYBSABKAUSDgoG",
            "REJOYW1lGAYgASgJEg4KBkRCVXNlchgHIAEoCRINCgVEQlB3ZBgIIAEoCRIR",
            "CglRdWV1ZUhvc3QYCSABKAkSEQoJUXVldWVQb3J0GAogASgFEhEKCVF1ZXVl",
            "VXNlchgLIAEoCRIQCghRdWV1ZVB3ZBgMIAEoCRIOCgZRdWV1ZXMYDSADKAki",
            "jgEKC1B0b1ZlckltYWdlEgsKA0tleRgBIAEoCRIQCghWZXJJbWFnZRgCIAEo",
            "DBIrCgdWZXJUeXBlGAMgASgOMhouUGxhdFB0b0NvZGUuUHRvVGFyZ2V0VHlw",
            "ZRIJCgFYGAQgASgFEgkKAVkYBSABKAUSDQoFV2lkdGgYBiABKAUSDgoGSGVp",
            "Z2h0GAcgASgFIj4KDFB0b1ZlclJldHVybhILCgNLZXkYASABKAkSDgoGUmVz",
            "dWx0GAIgASgIEhEKCUFubmV4RGF0YRgDIAEoCSIzCg9QdG9Ib3N0RW5kcG9p",
            "bnQSDgoGSG9zdElQGAEgASgJEhAKCEhvc3RQb3J0GAIgASgFIisKCFB0b0hl",
            "YXJ0Eg4KBkhvc3RJUBgBIAEoCRIPCgdBcHBNYXJrGAIgASgFKl8KDVB0b1Rh",
            "cmdldFR5cGUSCQoFRW1wdHkQABIKCgZQZXJzb24QARIICgRDYWxsEAISDgoK",
            "U3VuZ2xhc3NlcxADEgcKA0hhdBAEEgoKBkhlbG1ldBAFEggKBE1hc2sQBiqV",
            "AQoNUHRvRXZlbnRTdGF0ZRIMCghSZWNlaXZlZBAAEg0KCUZpbGVTYXZlZBAB",
            "EgwKCERCX1NhdmVkEAISDgoKUXVldWVTYXZlZBADEhIKDkNsaWVudFJlY2Vp",
            "dmVkEAQSFAoQQ2xpZW50UHJvY2Vzc2luZxAFEhEKDUNsaWVudFN1c3BlbmQQ",
            "BhIMCghDb21wbGV0ZRBkKkUKDlB0b09wZXJhdGVUeXBlEg0KCVByb2Nlc3Nl",
            "ZBAAEgwKCFRyYW5zbWl0EAESCwoHVGltZU91dBACEgkKBU90aGVyEGQyswQK",
            "C1BsYXRTZXJ2aWNlEkYKDUFsYXJtRGlzcG9zYWwSGy5QbGF0UHRvQ29kZS5Q",
            "dG9FdmVudFJlc3VsdBoWLlBsYXRQdG9Db2RlLlB0b1JldHVybiIAEkEKBUxv",
            "Z2luEhkuUGxhdFB0b0NvZGUuUHRvTG9naW5JbmZvGhsuUGxhdFB0b0NvZGUu",
            "UHRvTG9naW5SZXR1cm4iABI/CgZMb2dvdXQSFi5QbGF0UHRvQ29kZS5QdG9M",
            "b2dvdXQaGy5QbGF0UHRvQ29kZS5QdG9Mb2dpblJldHVybiIAEj4KC0hlYXJ0",
            "UmVwb3J0EhUuUGxhdFB0b0NvZGUuUHRvSGVhcnQaFi5QbGF0UHRvQ29kZS5Q",
            "dG9SZXR1cm4iABI+CgtBbGFybVJlcG9ydBIVLlBsYXRQdG9Db2RlLlB0b0V2",
            "ZW50GhYuUGxhdFB0b0NvZGUuUHRvUmV0dXJuIgASRAoLQWxhcm1WZXJpZnkS",
            "GC5QbGF0UHRvQ29kZS5QdG9WZXJJbWFnZRoZLlBsYXRQdG9Db2RlLlB0b1Zl",
            "clJldHVybiIAEkcKDUFsYXJtUmVnaXN0ZXISHC5QbGF0UHRvQ29kZS5QdG9I",
            "b3N0RW5kcG9pbnQaFi5QbGF0UHRvQ29kZS5QdG9SZXR1cm4iABJJCg9BbGFy",
            "bVVucmVnaXN0ZXISHC5QbGF0UHRvQ29kZS5QdG9Ib3N0RW5kcG9pbnQaFi5Q",
            "bGF0UHRvQ29kZS5QdG9SZXR1cm4iADJOCgxFdmVudFNlcnZpY2USPgoLQWxh",
            "cm1SZXBvcnQSFS5QbGF0UHRvQ29kZS5QdG9FdmVudBoWLlBsYXRQdG9Db2Rl",
            "LlB0b1JldHVybiIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PlatPtoCode.PtoTargetType), typeof(global::PlatPtoCode.PtoEventState), typeof(global::PlatPtoCode.PtoOperateType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoTarget), global::PlatPtoCode.PtoTarget.Parser, new[]{ "X", "Y", "Width", "Height", "ConfVal", "TargetType", "AnnexData", "ConfResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoImage), global::PlatPtoCode.PtoImage.Parser, new[]{ "Key", "AlarmImage", "Targets", "AnnexData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoEvent), global::PlatPtoCode.PtoEvent.Parser, new[]{ "ID", "Guid", "HostIP", "Channel", "InPort", "HappenTime", "AlarmType", "AlarmImages", "Description", "RelateVideo", "RelateVoice", "DeviceVersion", "PersonCount", "AnnexData", "IsVerified", "VerResult", "SavePath", "ReceiveTime", "HandleTime", "Remark", "EventState", "HostIdent", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoEventResult), global::PlatPtoCode.PtoEventResult.Parser, new[]{ "ID", "Guid", "UserId", "NextUserId", "ReceiveTime", "HandleTime", "Remark", "AnnexData", "Operate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoReturn), global::PlatPtoCode.PtoReturn.Parser, new[]{ "ErrorCode", "AnnexData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoLoginInfo), global::PlatPtoCode.PtoLoginInfo.Parser, new[]{ "UserName", "Password", "AnnexData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoLogout), global::PlatPtoCode.PtoLogout.Parser, new[]{ "UserName", "Password", "AnnexData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoLoginReturn), global::PlatPtoCode.PtoLoginReturn.Parser, new[]{ "Result", "ErrorCode", "AnnexData", "DBHost", "DBPort", "DBName", "DBUser", "DBPwd", "QueueHost", "QueuePort", "QueueUser", "QueuePwd", "Queues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoVerImage), global::PlatPtoCode.PtoVerImage.Parser, new[]{ "Key", "VerImage", "VerType", "X", "Y", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoVerReturn), global::PlatPtoCode.PtoVerReturn.Parser, new[]{ "Key", "Result", "AnnexData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoHostEndpoint), global::PlatPtoCode.PtoHostEndpoint.Parser, new[]{ "HostIP", "HostPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlatPtoCode.PtoHeart), global::PlatPtoCode.PtoHeart.Parser, new[]{ "HostIP", "AppMark" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 检测结果中的目标类型
  /// </summary>
  public enum PtoTargetType {
    /// <summary>
    /// 初始值
    /// </summary>
    [pbr::OriginalName("Empty")] Empty = 0,
    /// <summary>
    /// 人体检测
    /// </summary>
    [pbr::OriginalName("Person")] Person = 1,
    /// <summary>
    /// 打电话
    /// </summary>
    [pbr::OriginalName("Call")] Call = 2,
    /// <summary>
    /// 墨镜
    /// </summary>
    [pbr::OriginalName("Sunglasses")] Sunglasses = 3,
    /// <summary>
    /// 帽子
    /// </summary>
    [pbr::OriginalName("Hat")] Hat = 4,
    /// <summary>
    /// 头盔
    /// </summary>
    [pbr::OriginalName("Helmet")] Helmet = 5,
    /// <summary>
    /// 口罩
    /// </summary>
    [pbr::OriginalName("Mask")] Mask = 6,
  }

  /// <summary>
  /// 报警事件的处理状态
  /// </summary>
  public enum PtoEventState {
    /// <summary>
    /// 未处理
    /// </summary>
    [pbr::OriginalName("Received")] Received = 0,
    /// <summary>
    /// 保存到文件
    /// </summary>
    [pbr::OriginalName("FileSaved")] FileSaved = 1,
    /// <summary>
    /// 保存到数据库
    /// </summary>
    [pbr::OriginalName("DB_Saved")] DbSaved = 2,
    /// <summary>
    /// 保存到队列
    /// </summary>
    [pbr::OriginalName("QueueSaved")] QueueSaved = 3,
    /// <summary>
    /// 客户端已接收
    /// </summary>
    [pbr::OriginalName("ClientReceived")] ClientReceived = 4,
    /// <summary>
    /// 客户端正在处理
    /// </summary>
    [pbr::OriginalName("ClientProcessing")] ClientProcessing = 5,
    /// <summary>
    /// 处理过程已挂起
    /// </summary>
    [pbr::OriginalName("ClientSuspend")] ClientSuspend = 6,
    /// <summary>
    /// 处理过程结束
    /// </summary>
    [pbr::OriginalName("Complete")] Complete = 100,
  }

  /// <summary>
  /// 事件在客户端执行的操作
  /// </summary>
  public enum PtoOperateType {
    /// <summary>
    /// 已处理
    /// </summary>
    [pbr::OriginalName("Processed")] Processed = 0,
    /// <summary>
    /// 转发
    /// </summary>
    [pbr::OriginalName("Transmit")] Transmit = 1,
    /// <summary>
    /// 超时未处理
    /// </summary>
    [pbr::OriginalName("TimeOut")] TimeOut = 2,
    /// <summary>
    /// 其它未知现象
    /// </summary>
    [pbr::OriginalName("Other")] Other = 100,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 检测结果中的目标
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoTarget : pb::IMessage<PtoTarget> {
    private static readonly pb::MessageParser<PtoTarget> _parser = new pb::MessageParser<PtoTarget>(() => new PtoTarget());
    public static pb::MessageParser<PtoTarget> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoTarget(PtoTarget other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      confVal_ = other.confVal_;
      targetType_ = other.targetType_;
      annexData_ = other.annexData_;
      confResult_ = other.confResult_;
    }

    public PtoTarget Clone() {
      return new PtoTarget(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// 目标的X坐标
    /// </summary>
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// 目标的Y坐标
    /// </summary>
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    /// <summary>
    /// 目标宽度
    /// </summary>
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    /// <summary>
    /// 目标高度
    /// </summary>
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "ConfVal" field.</summary>
    public const int ConfValFieldNumber = 5;
    private int confVal_;
    /// <summary>
    /// 目标检测阈值
    /// </summary>
    public int ConfVal {
      get { return confVal_; }
      set {
        confVal_ = value;
      }
    }

    /// <summary>Field number for the "TargetType" field.</summary>
    public const int TargetTypeFieldNumber = 6;
    private global::PlatPtoCode.PtoTargetType targetType_ = 0;
    /// <summary>
    /// 目标类型
    /// </summary>
    public global::PlatPtoCode.PtoTargetType TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 7;
    private string annexData_ = "";
    /// <summary>
    /// 目标的附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConfResult" field.</summary>
    public const int ConfResultFieldNumber = 8;
    private bool confResult_;
    /// <summary>
    /// 服务端验证结果
    /// </summary>
    public bool ConfResult {
      get { return confResult_; }
      set {
        confResult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoTarget);
    }

    public bool Equals(PtoTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ConfVal != other.ConfVal) return false;
      if (TargetType != other.TargetType) return false;
      if (AnnexData != other.AnnexData) return false;
      if (ConfResult != other.ConfResult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ConfVal != 0) hash ^= ConfVal.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      if (ConfResult != false) hash ^= ConfResult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (ConfVal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConfVal);
      }
      if (TargetType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TargetType);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AnnexData);
      }
      if (ConfResult != false) {
        output.WriteRawTag(64);
        output.WriteBool(ConfResult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (ConfVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfVal);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      if (ConfResult != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(PtoTarget other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ConfVal != 0) {
        ConfVal = other.ConfVal;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
      if (other.ConfResult != false) {
        ConfResult = other.ConfResult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            ConfVal = input.ReadInt32();
            break;
          }
          case 48: {
            targetType_ = (global::PlatPtoCode.PtoTargetType) input.ReadEnum();
            break;
          }
          case 58: {
            AnnexData = input.ReadString();
            break;
          }
          case 64: {
            ConfResult = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 报警事件中的图片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoImage : pb::IMessage<PtoImage> {
    private static readonly pb::MessageParser<PtoImage> _parser = new pb::MessageParser<PtoImage>(() => new PtoImage());
    public static pb::MessageParser<PtoImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoImage(PtoImage other) : this() {
      key_ = other.key_;
      alarmImage_ = other.alarmImage_;
      targets_ = other.targets_.Clone();
      annexData_ = other.annexData_;
    }

    public PtoImage Clone() {
      return new PtoImage(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 图片的唯一键
    /// </summary>
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AlarmImage" field.</summary>
    public const int AlarmImageFieldNumber = 2;
    private pb::ByteString alarmImage_ = pb::ByteString.Empty;
    /// <summary>
    /// 报警图片
    /// </summary>
    public pb::ByteString AlarmImage {
      get { return alarmImage_; }
      set {
        alarmImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlatPtoCode.PtoTarget> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::PlatPtoCode.PtoTarget.Parser);
    private readonly pbc::RepeatedField<global::PlatPtoCode.PtoTarget> targets_ = new pbc::RepeatedField<global::PlatPtoCode.PtoTarget>();
    /// <summary>
    /// 图片中的目标
    /// </summary>
    public pbc::RepeatedField<global::PlatPtoCode.PtoTarget> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 4;
    private string annexData_ = "";
    /// <summary>
    /// 图片的附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoImage);
    }

    public bool Equals(PtoImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (AlarmImage != other.AlarmImage) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (AnnexData != other.AnnexData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (AlarmImage.Length != 0) hash ^= AlarmImage.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (AlarmImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AlarmImage);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (AnnexData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AnnexData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (AlarmImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AlarmImage);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      return size;
    }

    public void MergeFrom(PtoImage other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.AlarmImage.Length != 0) {
        AlarmImage = other.AlarmImage;
      }
      targets_.Add(other.targets_);
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            AlarmImage = input.ReadBytes();
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 34: {
            AnnexData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 报警事件
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoEvent : pb::IMessage<PtoEvent> {
    private static readonly pb::MessageParser<PtoEvent> _parser = new pb::MessageParser<PtoEvent>(() => new PtoEvent());
    public static pb::MessageParser<PtoEvent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoEvent(PtoEvent other) : this() {
      iD_ = other.iD_;
      guid_ = other.guid_;
      hostIP_ = other.hostIP_;
      channel_ = other.channel_;
      inPort_ = other.inPort_;
      happenTime_ = other.happenTime_;
      alarmType_ = other.alarmType_;
      alarmImages_ = other.alarmImages_.Clone();
      description_ = other.description_;
      relateVideo_ = other.relateVideo_;
      relateVoice_ = other.relateVoice_;
      deviceVersion_ = other.deviceVersion_;
      personCount_ = other.personCount_;
      annexData_ = other.annexData_;
      isVerified_ = other.isVerified_;
      verResult_ = other.verResult_;
      savePath_ = other.savePath_;
      receiveTime_ = other.receiveTime_;
      handleTime_ = other.handleTime_;
      remark_ = other.remark_;
      eventState_ = other.eventState_;
      hostIdent_ = other.hostIdent_;
      timeout_ = other.timeout_;
    }

    public PtoEvent Clone() {
      return new PtoEvent(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    /// 数据存储时生成的ID
    /// </summary>
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private string guid_ = "";
    /// <summary>
    /// 产生报警事件时生成的唯一标识
    /// </summary>
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HostIP" field.</summary>
    public const int HostIPFieldNumber = 3;
    private string hostIP_ = "";
    /// <summary>
    /// 报警主机
    /// </summary>
    public string HostIP {
      get { return hostIP_; }
      set {
        hostIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private int channel_;
    /// <summary>
    /// 视频通道
    /// </summary>
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "InPort" field.</summary>
    public const int InPortFieldNumber = 5;
    private int inPort_;
    /// <summary>
    /// 报警输入端口
    /// </summary>
    public int InPort {
      get { return inPort_; }
      set {
        inPort_ = value;
      }
    }

    /// <summary>Field number for the "HappenTime" field.</summary>
    public const int HappenTimeFieldNumber = 6;
    private string happenTime_ = "";
    /// <summary>
    /// 发生时间
    /// </summary>
    public string HappenTime {
      get { return happenTime_; }
      set {
        happenTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AlarmType" field.</summary>
    public const int AlarmTypeFieldNumber = 7;
    private int alarmType_;
    /// <summary>
    /// 报警类型
    /// </summary>
    public int AlarmType {
      get { return alarmType_; }
      set {
        alarmType_ = value;
      }
    }

    /// <summary>Field number for the "AlarmImages" field.</summary>
    public const int AlarmImagesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PlatPtoCode.PtoImage> _repeated_alarmImages_codec
        = pb::FieldCodec.ForMessage(66, global::PlatPtoCode.PtoImage.Parser);
    private readonly pbc::RepeatedField<global::PlatPtoCode.PtoImage> alarmImages_ = new pbc::RepeatedField<global::PlatPtoCode.PtoImage>();
    /// <summary>
    /// 报警图片
    /// </summary>
    public pbc::RepeatedField<global::PlatPtoCode.PtoImage> AlarmImages {
      get { return alarmImages_; }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 9;
    private string description_ = "";
    /// <summary>
    /// 描述信息
    /// </summary>
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RelateVideo" field.</summary>
    public const int RelateVideoFieldNumber = 10;
    private string relateVideo_ = "";
    /// <summary>
    /// 关联的视频信息，格式自行约定
    /// </summary>
    public string RelateVideo {
      get { return relateVideo_; }
      set {
        relateVideo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RelateVoice" field.</summary>
    public const int RelateVoiceFieldNumber = 11;
    private string relateVoice_ = "";
    /// <summary>
    /// 关联的音频信息，格式自行约定
    /// </summary>
    public string RelateVoice {
      get { return relateVoice_; }
      set {
        relateVoice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceVersion" field.</summary>
    public const int DeviceVersionFieldNumber = 12;
    private string deviceVersion_ = "";
    /// <summary>
    /// 前端设备的版本信息
    /// </summary>
    public string DeviceVersion {
      get { return deviceVersion_; }
      set {
        deviceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PersonCount" field.</summary>
    public const int PersonCountFieldNumber = 13;
    private int personCount_;
    /// <summary>
    /// 前端设备检测到的人数
    /// </summary>
    public int PersonCount {
      get { return personCount_; }
      set {
        personCount_ = value;
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 14;
    private string annexData_ = "";
    /// <summary>
    /// 事件的其它附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsVerified" field.</summary>
    public const int IsVerifiedFieldNumber = 15;
    private bool isVerified_;
    /// <summary>
    /// 是否已验证过(true则服务器不再进行验证)
    /// </summary>
    public bool IsVerified {
      get { return isVerified_; }
      set {
        isVerified_ = value;
      }
    }

    /// <summary>Field number for the "VerResult" field.</summary>
    public const int VerResultFieldNumber = 16;
    private bool verResult_;
    /// <summary>
    /// 验证结果(正确:true,误报:false)
    /// </summary>
    public bool VerResult {
      get { return verResult_; }
      set {
        verResult_ = value;
      }
    }

    /// <summary>Field number for the "SavePath" field.</summary>
    public const int SavePathFieldNumber = 17;
    private string savePath_ = "";
    /// <summary>
    /// 报警事件文件的存放位置
    /// </summary>
    public string SavePath {
      get { return savePath_; }
      set {
        savePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 18;
    private string receiveTime_ = "";
    /// <summary>
    /// 事件在客户端的接收时间
    /// </summary>
    public string ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HandleTime" field.</summary>
    public const int HandleTimeFieldNumber = 19;
    private string handleTime_ = "";
    /// <summary>
    /// 事件在客户端的处置时间
    /// </summary>
    public string HandleTime {
      get { return handleTime_; }
      set {
        handleTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Remark" field.</summary>
    public const int RemarkFieldNumber = 20;
    private string remark_ = "";
    /// <summary>
    /// 备注信息，客户端在处置过程中填写的文字信息
    /// </summary>
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EventState" field.</summary>
    public const int EventStateFieldNumber = 21;
    private global::PlatPtoCode.PtoEventState eventState_ = 0;
    /// <summary>
    /// 报警事件的处置状态
    /// </summary>
    public global::PlatPtoCode.PtoEventState EventState {
      get { return eventState_; }
      set {
        eventState_ = value;
      }
    }

    /// <summary>Field number for the "HostIdent" field.</summary>
    public const int HostIdentFieldNumber = 22;
    private string hostIdent_ = "";
    /// <summary>
    /// 主机唯一标识
    /// </summary>
    public string HostIdent {
      get { return hostIdent_; }
      set {
        hostIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timeout" field.</summary>
    public const int TimeoutFieldNumber = 23;
    private int timeout_;
    /// <summary>
    /// 消息的最长处理时间，针对不同的事件级别可以采用不同的时长
    /// </summary>
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoEvent);
    }

    public bool Equals(PtoEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Guid != other.Guid) return false;
      if (HostIP != other.HostIP) return false;
      if (Channel != other.Channel) return false;
      if (InPort != other.InPort) return false;
      if (HappenTime != other.HappenTime) return false;
      if (AlarmType != other.AlarmType) return false;
      if(!alarmImages_.Equals(other.alarmImages_)) return false;
      if (Description != other.Description) return false;
      if (RelateVideo != other.RelateVideo) return false;
      if (RelateVoice != other.RelateVoice) return false;
      if (DeviceVersion != other.DeviceVersion) return false;
      if (PersonCount != other.PersonCount) return false;
      if (AnnexData != other.AnnexData) return false;
      if (IsVerified != other.IsVerified) return false;
      if (VerResult != other.VerResult) return false;
      if (SavePath != other.SavePath) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (HandleTime != other.HandleTime) return false;
      if (Remark != other.Remark) return false;
      if (EventState != other.EventState) return false;
      if (HostIdent != other.HostIdent) return false;
      if (Timeout != other.Timeout) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (HostIP.Length != 0) hash ^= HostIP.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (InPort != 0) hash ^= InPort.GetHashCode();
      if (HappenTime.Length != 0) hash ^= HappenTime.GetHashCode();
      if (AlarmType != 0) hash ^= AlarmType.GetHashCode();
      hash ^= alarmImages_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (RelateVideo.Length != 0) hash ^= RelateVideo.GetHashCode();
      if (RelateVoice.Length != 0) hash ^= RelateVoice.GetHashCode();
      if (DeviceVersion.Length != 0) hash ^= DeviceVersion.GetHashCode();
      if (PersonCount != 0) hash ^= PersonCount.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      if (IsVerified != false) hash ^= IsVerified.GetHashCode();
      if (VerResult != false) hash ^= VerResult.GetHashCode();
      if (SavePath.Length != 0) hash ^= SavePath.GetHashCode();
      if (ReceiveTime.Length != 0) hash ^= ReceiveTime.GetHashCode();
      if (HandleTime.Length != 0) hash ^= HandleTime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (EventState != 0) hash ^= EventState.GetHashCode();
      if (HostIdent.Length != 0) hash ^= HostIdent.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Guid);
      }
      if (HostIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HostIP);
      }
      if (Channel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Channel);
      }
      if (InPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InPort);
      }
      if (HappenTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HappenTime);
      }
      if (AlarmType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AlarmType);
      }
      alarmImages_.WriteTo(output, _repeated_alarmImages_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Description);
      }
      if (RelateVideo.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RelateVideo);
      }
      if (RelateVoice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RelateVoice);
      }
      if (DeviceVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DeviceVersion);
      }
      if (PersonCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PersonCount);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AnnexData);
      }
      if (IsVerified != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsVerified);
      }
      if (VerResult != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(VerResult);
      }
      if (SavePath.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SavePath);
      }
      if (ReceiveTime.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ReceiveTime);
      }
      if (HandleTime.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(HandleTime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Remark);
      }
      if (EventState != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) EventState);
      }
      if (HostIdent.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(HostIdent);
      }
      if (Timeout != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Timeout);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (HostIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIP);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (InPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InPort);
      }
      if (HappenTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HappenTime);
      }
      if (AlarmType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlarmType);
      }
      size += alarmImages_.CalculateSize(_repeated_alarmImages_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (RelateVideo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RelateVideo);
      }
      if (RelateVoice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RelateVoice);
      }
      if (DeviceVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceVersion);
      }
      if (PersonCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonCount);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      if (IsVerified != false) {
        size += 1 + 1;
      }
      if (VerResult != false) {
        size += 2 + 1;
      }
      if (SavePath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SavePath);
      }
      if (ReceiveTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReceiveTime);
      }
      if (HandleTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HandleTime);
      }
      if (Remark.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (EventState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EventState);
      }
      if (HostIdent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HostIdent);
      }
      if (Timeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      return size;
    }

    public void MergeFrom(PtoEvent other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.HostIP.Length != 0) {
        HostIP = other.HostIP;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.InPort != 0) {
        InPort = other.InPort;
      }
      if (other.HappenTime.Length != 0) {
        HappenTime = other.HappenTime;
      }
      if (other.AlarmType != 0) {
        AlarmType = other.AlarmType;
      }
      alarmImages_.Add(other.alarmImages_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.RelateVideo.Length != 0) {
        RelateVideo = other.RelateVideo;
      }
      if (other.RelateVoice.Length != 0) {
        RelateVoice = other.RelateVoice;
      }
      if (other.DeviceVersion.Length != 0) {
        DeviceVersion = other.DeviceVersion;
      }
      if (other.PersonCount != 0) {
        PersonCount = other.PersonCount;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
      if (other.IsVerified != false) {
        IsVerified = other.IsVerified;
      }
      if (other.VerResult != false) {
        VerResult = other.VerResult;
      }
      if (other.SavePath.Length != 0) {
        SavePath = other.SavePath;
      }
      if (other.ReceiveTime.Length != 0) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.HandleTime.Length != 0) {
        HandleTime = other.HandleTime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.EventState != 0) {
        EventState = other.EventState;
      }
      if (other.HostIdent.Length != 0) {
        HostIdent = other.HostIdent;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Guid = input.ReadString();
            break;
          }
          case 26: {
            HostIP = input.ReadString();
            break;
          }
          case 32: {
            Channel = input.ReadInt32();
            break;
          }
          case 40: {
            InPort = input.ReadInt32();
            break;
          }
          case 50: {
            HappenTime = input.ReadString();
            break;
          }
          case 56: {
            AlarmType = input.ReadInt32();
            break;
          }
          case 66: {
            alarmImages_.AddEntriesFrom(input, _repeated_alarmImages_codec);
            break;
          }
          case 74: {
            Description = input.ReadString();
            break;
          }
          case 82: {
            RelateVideo = input.ReadString();
            break;
          }
          case 90: {
            RelateVoice = input.ReadString();
            break;
          }
          case 98: {
            DeviceVersion = input.ReadString();
            break;
          }
          case 104: {
            PersonCount = input.ReadInt32();
            break;
          }
          case 114: {
            AnnexData = input.ReadString();
            break;
          }
          case 120: {
            IsVerified = input.ReadBool();
            break;
          }
          case 128: {
            VerResult = input.ReadBool();
            break;
          }
          case 138: {
            SavePath = input.ReadString();
            break;
          }
          case 146: {
            ReceiveTime = input.ReadString();
            break;
          }
          case 154: {
            HandleTime = input.ReadString();
            break;
          }
          case 162: {
            Remark = input.ReadString();
            break;
          }
          case 168: {
            eventState_ = (global::PlatPtoCode.PtoEventState) input.ReadEnum();
            break;
          }
          case 178: {
            HostIdent = input.ReadString();
            break;
          }
          case 184: {
            Timeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 事件处置结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoEventResult : pb::IMessage<PtoEventResult> {
    private static readonly pb::MessageParser<PtoEventResult> _parser = new pb::MessageParser<PtoEventResult>(() => new PtoEventResult());
    public static pb::MessageParser<PtoEventResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoEventResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoEventResult(PtoEventResult other) : this() {
      iD_ = other.iD_;
      guid_ = other.guid_;
      userId_ = other.userId_;
      nextUserId_ = other.nextUserId_;
      receiveTime_ = other.receiveTime_;
      handleTime_ = other.handleTime_;
      remark_ = other.remark_;
      annexData_ = other.annexData_;
      operate_ = other.operate_;
    }

    public PtoEventResult Clone() {
      return new PtoEventResult(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    /// 数据存储时生成的ID
    /// </summary>
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private string guid_ = "";
    /// <summary>
    /// 产生报警事件时生成的唯一标识
    /// </summary>
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private int userId_;
    /// <summary>
    /// 处置该事件的用户
    /// </summary>
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "NextUserId" field.</summary>
    public const int NextUserIdFieldNumber = 4;
    private int nextUserId_;
    /// <summary>
    /// 转发给指定的用户(仅在用户转发时有效) 
    /// </summary>
    public int NextUserId {
      get { return nextUserId_; }
      set {
        nextUserId_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 5;
    private string receiveTime_ = "";
    /// <summary>
    /// 事件在客户端的接收时间
    /// </summary>
    public string ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HandleTime" field.</summary>
    public const int HandleTimeFieldNumber = 6;
    private string handleTime_ = "";
    /// <summary>
    /// 事件在客户端的处置时间
    /// </summary>
    public string HandleTime {
      get { return handleTime_; }
      set {
        handleTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Remark" field.</summary>
    public const int RemarkFieldNumber = 7;
    private string remark_ = "";
    /// <summary>
    /// 备注信息，客户端在处置过程中填写的文字信息
    /// </summary>
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 8;
    private string annexData_ = "";
    /// <summary>
    /// 事件在消费者处理完成后的附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Operate" field.</summary>
    public const int OperateFieldNumber = 9;
    private global::PlatPtoCode.PtoOperateType operate_ = 0;
    /// <summary>
    /// 客户端收到时间后执行的操作
    /// </summary>
    public global::PlatPtoCode.PtoOperateType Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoEventResult);
    }

    public bool Equals(PtoEventResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Guid != other.Guid) return false;
      if (UserId != other.UserId) return false;
      if (NextUserId != other.NextUserId) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (HandleTime != other.HandleTime) return false;
      if (Remark != other.Remark) return false;
      if (AnnexData != other.AnnexData) return false;
      if (Operate != other.Operate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (NextUserId != 0) hash ^= NextUserId.GetHashCode();
      if (ReceiveTime.Length != 0) hash ^= ReceiveTime.GetHashCode();
      if (HandleTime.Length != 0) hash ^= HandleTime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Guid);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      if (NextUserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NextUserId);
      }
      if (ReceiveTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReceiveTime);
      }
      if (HandleTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HandleTime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Remark);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AnnexData);
      }
      if (Operate != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Operate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (NextUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextUserId);
      }
      if (ReceiveTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiveTime);
      }
      if (HandleTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HandleTime);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      return size;
    }

    public void MergeFrom(PtoEventResult other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.NextUserId != 0) {
        NextUserId = other.NextUserId;
      }
      if (other.ReceiveTime.Length != 0) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.HandleTime.Length != 0) {
        HandleTime = other.HandleTime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Guid = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 32: {
            NextUserId = input.ReadInt32();
            break;
          }
          case 42: {
            ReceiveTime = input.ReadString();
            break;
          }
          case 50: {
            HandleTime = input.ReadString();
            break;
          }
          case 58: {
            Remark = input.ReadString();
            break;
          }
          case 66: {
            AnnexData = input.ReadString();
            break;
          }
          case 72: {
            operate_ = (global::PlatPtoCode.PtoOperateType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 无返回值的时候使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoReturn : pb::IMessage<PtoReturn> {
    private static readonly pb::MessageParser<PtoReturn> _parser = new pb::MessageParser<PtoReturn>(() => new PtoReturn());
    public static pb::MessageParser<PtoReturn> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoReturn() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoReturn(PtoReturn other) : this() {
      errorCode_ = other.errorCode_;
      annexData_ = other.annexData_;
    }

    public PtoReturn Clone() {
      return new PtoReturn(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    /// <summary>
    /// 错误代码,无错误时该值为0   
    /// </summary>
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 2;
    private string annexData_ = "";
    /// <summary>
    /// 附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoReturn);
    }

    public bool Equals(PtoReturn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (AnnexData != other.AnnexData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnexData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      return size;
    }

    public void MergeFrom(PtoReturn other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            AnnexData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户登录信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoLoginInfo : pb::IMessage<PtoLoginInfo> {
    private static readonly pb::MessageParser<PtoLoginInfo> _parser = new pb::MessageParser<PtoLoginInfo>(() => new PtoLoginInfo());
    public static pb::MessageParser<PtoLoginInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoLoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoLoginInfo(PtoLoginInfo other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      annexData_ = other.annexData_;
    }

    public PtoLoginInfo Clone() {
      return new PtoLoginInfo(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 3;
    private string annexData_ = "";
    /// <summary>
    /// 附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoLoginInfo);
    }

    public bool Equals(PtoLoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (AnnexData != other.AnnexData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnexData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      return size;
    }

    public void MergeFrom(PtoLoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            AnnexData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 注销登录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoLogout : pb::IMessage<PtoLogout> {
    private static readonly pb::MessageParser<PtoLogout> _parser = new pb::MessageParser<PtoLogout>(() => new PtoLogout());
    public static pb::MessageParser<PtoLogout> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoLogout(PtoLogout other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      annexData_ = other.annexData_;
    }

    public PtoLogout Clone() {
      return new PtoLogout(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 密码,退出需要密码是防止被恶意退出
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 3;
    private string annexData_ = "";
    /// <summary>
    /// 附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoLogout);
    }

    public bool Equals(PtoLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (AnnexData != other.AnnexData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnexData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      return size;
    }

    public void MergeFrom(PtoLogout other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            AnnexData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录/注销 返回信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoLoginReturn : pb::IMessage<PtoLoginReturn> {
    private static readonly pb::MessageParser<PtoLoginReturn> _parser = new pb::MessageParser<PtoLoginReturn>(() => new PtoLoginReturn());
    public static pb::MessageParser<PtoLoginReturn> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoLoginReturn() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoLoginReturn(PtoLoginReturn other) : this() {
      result_ = other.result_;
      errorCode_ = other.errorCode_;
      annexData_ = other.annexData_;
      dBHost_ = other.dBHost_;
      dBPort_ = other.dBPort_;
      dBName_ = other.dBName_;
      dBUser_ = other.dBUser_;
      dBPwd_ = other.dBPwd_;
      queueHost_ = other.queueHost_;
      queuePort_ = other.queuePort_;
      queueUser_ = other.queueUser_;
      queuePwd_ = other.queuePwd_;
      queues_ = other.queues_.Clone();
    }

    public PtoLoginReturn Clone() {
      return new PtoLoginReturn(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    /// <summary>
    /// true登录成功，false失败
    /// </summary>
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private int errorCode_;
    /// <summary>
    /// 错误代码,无错误时该值为0   
    /// </summary>
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 3;
    private string annexData_ = "";
    /// <summary>
    /// 附加信息
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBHost" field.</summary>
    public const int DBHostFieldNumber = 4;
    private string dBHost_ = "";
    /// <summary>
    /// 数据库服务器主机
    /// </summary>
    public string DBHost {
      get { return dBHost_; }
      set {
        dBHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBPort" field.</summary>
    public const int DBPortFieldNumber = 5;
    private int dBPort_;
    /// <summary>
    /// 数据库服务器端口
    /// </summary>
    public int DBPort {
      get { return dBPort_; }
      set {
        dBPort_ = value;
      }
    }

    /// <summary>Field number for the "DBName" field.</summary>
    public const int DBNameFieldNumber = 6;
    private string dBName_ = "";
    /// <summary>
    /// 数据库名称
    /// </summary>
    public string DBName {
      get { return dBName_; }
      set {
        dBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBUser" field.</summary>
    public const int DBUserFieldNumber = 7;
    private string dBUser_ = "";
    /// <summary>
    /// 数据库登录名
    /// </summary>
    public string DBUser {
      get { return dBUser_; }
      set {
        dBUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DBPwd" field.</summary>
    public const int DBPwdFieldNumber = 8;
    private string dBPwd_ = "";
    /// <summary>
    /// 数据库密码
    /// </summary>
    public string DBPwd {
      get { return dBPwd_; }
      set {
        dBPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QueueHost" field.</summary>
    public const int QueueHostFieldNumber = 9;
    private string queueHost_ = "";
    /// <summary>
    /// 队列服务器
    /// </summary>
    public string QueueHost {
      get { return queueHost_; }
      set {
        queueHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QueuePort" field.</summary>
    public const int QueuePortFieldNumber = 10;
    private int queuePort_;
    /// <summary>
    /// 队列服务器端口
    /// </summary>
    public int QueuePort {
      get { return queuePort_; }
      set {
        queuePort_ = value;
      }
    }

    /// <summary>Field number for the "QueueUser" field.</summary>
    public const int QueueUserFieldNumber = 11;
    private string queueUser_ = "";
    /// <summary>
    /// 队列用户名
    /// </summary>
    public string QueueUser {
      get { return queueUser_; }
      set {
        queueUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QueuePwd" field.</summary>
    public const int QueuePwdFieldNumber = 12;
    private string queuePwd_ = "";
    /// <summary>
    /// 队列密码
    /// </summary>
    public string QueuePwd {
      get { return queuePwd_; }
      set {
        queuePwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Queues" field.</summary>
    public const int QueuesFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_queues_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> queues_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 用户有权限的队列
    /// </summary>
    public pbc::RepeatedField<string> Queues {
      get { return queues_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoLoginReturn);
    }

    public bool Equals(PtoLoginReturn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (AnnexData != other.AnnexData) return false;
      if (DBHost != other.DBHost) return false;
      if (DBPort != other.DBPort) return false;
      if (DBName != other.DBName) return false;
      if (DBUser != other.DBUser) return false;
      if (DBPwd != other.DBPwd) return false;
      if (QueueHost != other.QueueHost) return false;
      if (QueuePort != other.QueuePort) return false;
      if (QueueUser != other.QueueUser) return false;
      if (QueuePwd != other.QueuePwd) return false;
      if(!queues_.Equals(other.queues_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      if (DBHost.Length != 0) hash ^= DBHost.GetHashCode();
      if (DBPort != 0) hash ^= DBPort.GetHashCode();
      if (DBName.Length != 0) hash ^= DBName.GetHashCode();
      if (DBUser.Length != 0) hash ^= DBUser.GetHashCode();
      if (DBPwd.Length != 0) hash ^= DBPwd.GetHashCode();
      if (QueueHost.Length != 0) hash ^= QueueHost.GetHashCode();
      if (QueuePort != 0) hash ^= QueuePort.GetHashCode();
      if (QueueUser.Length != 0) hash ^= QueueUser.GetHashCode();
      if (QueuePwd.Length != 0) hash ^= QueuePwd.GetHashCode();
      hash ^= queues_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorCode);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnexData);
      }
      if (DBHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DBHost);
      }
      if (DBPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DBPort);
      }
      if (DBName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DBName);
      }
      if (DBUser.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DBUser);
      }
      if (DBPwd.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DBPwd);
      }
      if (QueueHost.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(QueueHost);
      }
      if (QueuePort != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(QueuePort);
      }
      if (QueueUser.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(QueueUser);
      }
      if (QueuePwd.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(QueuePwd);
      }
      queues_.WriteTo(output, _repeated_queues_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      if (DBHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBHost);
      }
      if (DBPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DBPort);
      }
      if (DBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBName);
      }
      if (DBUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBUser);
      }
      if (DBPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBPwd);
      }
      if (QueueHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueHost);
      }
      if (QueuePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueuePort);
      }
      if (QueueUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueUser);
      }
      if (QueuePwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueuePwd);
      }
      size += queues_.CalculateSize(_repeated_queues_codec);
      return size;
    }

    public void MergeFrom(PtoLoginReturn other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
      if (other.DBHost.Length != 0) {
        DBHost = other.DBHost;
      }
      if (other.DBPort != 0) {
        DBPort = other.DBPort;
      }
      if (other.DBName.Length != 0) {
        DBName = other.DBName;
      }
      if (other.DBUser.Length != 0) {
        DBUser = other.DBUser;
      }
      if (other.DBPwd.Length != 0) {
        DBPwd = other.DBPwd;
      }
      if (other.QueueHost.Length != 0) {
        QueueHost = other.QueueHost;
      }
      if (other.QueuePort != 0) {
        QueuePort = other.QueuePort;
      }
      if (other.QueueUser.Length != 0) {
        QueueUser = other.QueueUser;
      }
      if (other.QueuePwd.Length != 0) {
        QueuePwd = other.QueuePwd;
      }
      queues_.Add(other.queues_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 26: {
            AnnexData = input.ReadString();
            break;
          }
          case 34: {
            DBHost = input.ReadString();
            break;
          }
          case 40: {
            DBPort = input.ReadInt32();
            break;
          }
          case 50: {
            DBName = input.ReadString();
            break;
          }
          case 58: {
            DBUser = input.ReadString();
            break;
          }
          case 66: {
            DBPwd = input.ReadString();
            break;
          }
          case 74: {
            QueueHost = input.ReadString();
            break;
          }
          case 80: {
            QueuePort = input.ReadInt32();
            break;
          }
          case 90: {
            QueueUser = input.ReadString();
            break;
          }
          case 98: {
            QueuePwd = input.ReadString();
            break;
          }
          case 106: {
            queues_.AddEntriesFrom(input, _repeated_queues_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 验证图片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoVerImage : pb::IMessage<PtoVerImage> {
    private static readonly pb::MessageParser<PtoVerImage> _parser = new pb::MessageParser<PtoVerImage>(() => new PtoVerImage());
    public static pb::MessageParser<PtoVerImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoVerImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoVerImage(PtoVerImage other) : this() {
      key_ = other.key_;
      verImage_ = other.verImage_;
      verType_ = other.verType_;
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
    }

    public PtoVerImage Clone() {
      return new PtoVerImage(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 键值(唯一)
    /// </summary>
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerImage" field.</summary>
    public const int VerImageFieldNumber = 2;
    private pb::ByteString verImage_ = pb::ByteString.Empty;
    /// <summary>
    /// 验证图片
    /// </summary>
    public pb::ByteString VerImage {
      get { return verImage_; }
      set {
        verImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerType" field.</summary>
    public const int VerTypeFieldNumber = 3;
    private global::PlatPtoCode.PtoTargetType verType_ = 0;
    /// <summary>
    /// 目标验证类型
    /// </summary>
    public global::PlatPtoCode.PtoTargetType VerType {
      get { return verType_; }
      set {
        verType_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    /// <summary>
    /// 有效检测区X位置
    /// </summary>
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    /// <summary>
    /// 有效检测区Y位置
    /// </summary>
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 6;
    private int width_;
    /// <summary>
    /// 有效检测区宽度
    /// </summary>
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 7;
    private int height_;
    /// <summary>
    /// 有效检测区高度
    /// </summary>
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoVerImage);
    }

    public bool Equals(PtoVerImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (VerImage != other.VerImage) return false;
      if (VerType != other.VerType) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (VerImage.Length != 0) hash ^= VerImage.GetHashCode();
      if (VerType != 0) hash ^= VerType.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (VerImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(VerImage);
      }
      if (VerType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VerType);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Height);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (VerImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VerImage);
      }
      if (VerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VerType);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    public void MergeFrom(PtoVerImage other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.VerImage.Length != 0) {
        VerImage = other.VerImage;
      }
      if (other.VerType != 0) {
        VerType = other.VerType;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            VerImage = input.ReadBytes();
            break;
          }
          case 24: {
            verType_ = (global::PlatPtoCode.PtoTargetType) input.ReadEnum();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Width = input.ReadInt32();
            break;
          }
          case 56: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器检测结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoVerReturn : pb::IMessage<PtoVerReturn> {
    private static readonly pb::MessageParser<PtoVerReturn> _parser = new pb::MessageParser<PtoVerReturn>(() => new PtoVerReturn());
    public static pb::MessageParser<PtoVerReturn> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoVerReturn() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoVerReturn(PtoVerReturn other) : this() {
      key_ = other.key_;
      result_ = other.result_;
      annexData_ = other.annexData_;
    }

    public PtoVerReturn Clone() {
      return new PtoVerReturn(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 键值(唯一)
    /// </summary>
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private bool result_;
    /// <summary>
    /// 验证结果 成功true 失败false
    /// </summary>
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "AnnexData" field.</summary>
    public const int AnnexDataFieldNumber = 3;
    private string annexData_ = "";
    /// <summary>
    /// 附属数据，可以是json或者其它协定的格式数据
    /// </summary>
    public string AnnexData {
      get { return annexData_; }
      set {
        annexData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoVerReturn);
    }

    public bool Equals(PtoVerReturn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Result != other.Result) return false;
      if (AnnexData != other.AnnexData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (AnnexData.Length != 0) hash ^= AnnexData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (AnnexData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnexData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (AnnexData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnexData);
      }
      return size;
    }

    public void MergeFrom(PtoVerReturn other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.AnnexData.Length != 0) {
        AnnexData = other.AnnexData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 26: {
            AnnexData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 注册预警服务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoHostEndpoint : pb::IMessage<PtoHostEndpoint> {
    private static readonly pb::MessageParser<PtoHostEndpoint> _parser = new pb::MessageParser<PtoHostEndpoint>(() => new PtoHostEndpoint());
    public static pb::MessageParser<PtoHostEndpoint> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoHostEndpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoHostEndpoint(PtoHostEndpoint other) : this() {
      hostIP_ = other.hostIP_;
      hostPort_ = other.hostPort_;
    }

    public PtoHostEndpoint Clone() {
      return new PtoHostEndpoint(this);
    }

    /// <summary>Field number for the "HostIP" field.</summary>
    public const int HostIPFieldNumber = 1;
    private string hostIP_ = "";
    /// <summary>
    /// 主机IP
    /// </summary>
    public string HostIP {
      get { return hostIP_; }
      set {
        hostIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HostPort" field.</summary>
    public const int HostPortFieldNumber = 2;
    private int hostPort_;
    /// <summary>
    /// 主机端口
    /// </summary>
    public int HostPort {
      get { return hostPort_; }
      set {
        hostPort_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoHostEndpoint);
    }

    public bool Equals(PtoHostEndpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostIP != other.HostIP) return false;
      if (HostPort != other.HostPort) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (HostIP.Length != 0) hash ^= HostIP.GetHashCode();
      if (HostPort != 0) hash ^= HostPort.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (HostIP.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostIP);
      }
      if (HostPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HostPort);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (HostIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIP);
      }
      if (HostPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostPort);
      }
      return size;
    }

    public void MergeFrom(PtoHostEndpoint other) {
      if (other == null) {
        return;
      }
      if (other.HostIP.Length != 0) {
        HostIP = other.HostIP;
      }
      if (other.HostPort != 0) {
        HostPort = other.HostPort;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostIP = input.ReadString();
            break;
          }
          case 16: {
            HostPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 心跳包
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PtoHeart : pb::IMessage<PtoHeart> {
    private static readonly pb::MessageParser<PtoHeart> _parser = new pb::MessageParser<PtoHeart>(() => new PtoHeart());
    public static pb::MessageParser<PtoHeart> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlatPtoCode.PlatPtoCodeReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PtoHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PtoHeart(PtoHeart other) : this() {
      hostIP_ = other.hostIP_;
      appMark_ = other.appMark_;
    }

    public PtoHeart Clone() {
      return new PtoHeart(this);
    }

    /// <summary>Field number for the "HostIP" field.</summary>
    public const int HostIPFieldNumber = 1;
    private string hostIP_ = "";
    /// <summary>
    /// 发送心跳包的主机IP
    /// </summary>
    public string HostIP {
      get { return hostIP_; }
      set {
        hostIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AppMark" field.</summary>
    public const int AppMarkFieldNumber = 2;
    private int appMark_;
    /// <summary>
    /// 应用程序标记(一台机器运行多个程序的情况)
    /// </summary>
    public int AppMark {
      get { return appMark_; }
      set {
        appMark_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PtoHeart);
    }

    public bool Equals(PtoHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostIP != other.HostIP) return false;
      if (AppMark != other.AppMark) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (HostIP.Length != 0) hash ^= HostIP.GetHashCode();
      if (AppMark != 0) hash ^= AppMark.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (HostIP.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostIP);
      }
      if (AppMark != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AppMark);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (HostIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIP);
      }
      if (AppMark != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppMark);
      }
      return size;
    }

    public void MergeFrom(PtoHeart other) {
      if (other == null) {
        return;
      }
      if (other.HostIP.Length != 0) {
        HostIP = other.HostIP;
      }
      if (other.AppMark != 0) {
        AppMark = other.AppMark;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostIP = input.ReadString();
            break;
          }
          case 16: {
            AppMark = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
