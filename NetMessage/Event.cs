// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Suresecureivs {

  /// <summary>Holder for reflection information generated from event.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class EventReflection {

    #region Descriptor
    /// <summary>File descriptor for event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtldmVudC5wcm90bxINc3VyZXNlY3VyZWl2cyJ+CgZUYXJnZXQSCQoBeBgB",
            "IAEoBRIJCgF5GAIgASgFEgkKAXcYAyABKAUSCQoBaBgEIAEoBRIoCgR0eXBl",
            "GAUgASgOMhouc3VyZXNlY3VyZWl2cy5UYXJnZXQuVHlwZSIeCgRUeXBlEgoK",
            "BnBlcnNvbhAAEgoKBm9iamVjdBABIkUKDkFubm90YXRlZEltYWdlEgsKA2lt",
            "ZxgBIAEoDBImCgd0YXJnZXRzGAIgAygLMhUuc3VyZXNlY3VyZWl2cy5UYXJn",
            "ZXQi8AgKBUV2ZW50EicKBHR5cGUYASABKA4yGS5zdXJlc2VjdXJlaXZzLkV2",
            "ZW50LlR5cGUSKQoFbGV2ZWwYAiABKA4yGi5zdXJlc2VjdXJlaXZzLkV2ZW50",
            "LkxldmVsEg8KB3NlY29uZHMYAyABKAMSDAoEaW1ncxgEIAMoDBITCgtkZXNj",
            "cmlwdGlvbhgFIAEoCRITCgtob3N0YWRkcmVzcxgGIAEoCRIQCghob3N0cG9y",
            "dBgHIAEoDRIQCghmaWxlbmFtZRgIIAEoCRIwCglhbm5vX2ltZ3MYCSADKAsy",
            "HS5zdXJlc2VjdXJlaXZzLkFubm90YXRlZEltYWdlIrwGCgRUeXBlEgwKCGV2",
            "dF9ub25lEAASEwoPZXZ0X3Blb3BsZV9hcHByEAESEgoOZXZ0X3ZpZGVvX2Js",
            "dXIQAhIQCgxldnRfb2JqX2FwcHIQAxISCg5ldnRfcGVvcGxlX3JlYxAEEhUK",
            "EWV2dF9vZGRfcGVvcGxlX2RnEAUSFQoRZXZ0X29kZF9wZW9wbGVfY3YQBhIV",
            "ChFldnRfZmFrZV9rZXlib2FyZBAHEhcKE2V2dF9mYWtlX2NhcmRyZWFkZXIQ",
            "CBITCg9ldnRfdmlkZW9fY3Jhc2gQCRIRCg1ldnRfbm9fc2lnbmFsEAoSEwoP",
            "ZXZ0X3Blb3BsZV9yZWNkEAsSFQoRZXZ0X29kZF9wZW9wbGVfc3cQDBIRCg1l",
            "dnRfcGxheXNvdW5kEA0SFQoRZXZ0X29kZF9wZW9wbGVfdW4QDhITCg9ldnRf",
            "bm9ybV9wZW9wbGUQDxIWChJldnRfcGVvcGxlX2xpZWRvd24QFBISCg5ldnRf",
            "cGVvcGxlX3J1bhAVEhUKEWV2dF9wZW9wbGVfZm9sbG93EBYSEwoPZXZ0X29i",
            "amVjdF9zdGF5EBcSFQoRZXZ0X3Blb3BsZV93YW5kZXIQGBIUChBldnRfcGVv",
            "cGxlX2ZpZ2h0EBkSFgoSZXZ0X3JlZ2lvbl92aW9sYXRlEBoSEQoNZXZ0X3Jl",
            "Z2lvbl9pbhAbEhIKDmV2dF9yZWdpb25fb3V0EBwSFgoSZXZ0X2RlcHRoY2Ft",
            "X2Jsb2NrEB0SFQoRZXZ0X3JlZ2lvbl9ub3JtYWwQHhISCg5ldnRfcGVvcGxl",
            "X2NudBAfEg8KC2V2dF9oaXRfYXRtECASEwoPZXZ0X3NlbnNvcl9sb3N0ECES",
            "EwoPZXZ0X3Blb3BsZV9zdGF5ECISFQoRZXZ0X3JlZ2lvbl9pbl92aW8QIxIQ",
            "CgxldnRfY2FtX21vdmUQJBITCg9ldnRfcGVvcGxlX2Rvd24QJRIVChFldnRf",
            "cGVvcGxlX2NudF91cBAmEhcKE2V2dF9wZW9wbGVfY250X2Rvd24QJxIRCg1l",
            "dnRfZm9sbG93X2luECgSEwoPZXZ0X2Zha2VfcGVvcGxlECkSDgoKZXZ0X3Nh",
            "bXBsZRAyIjUKBUxldmVsEhEKDWxldmVsX2RlZmF1bHQQABIZChVsZXZlbF9m",
            "YWNlX3JlY29nbml6ZWQQASIjChBSZXBvcnRFdmVudFJlcGx5Eg8KB21lc3Nh",
            "Z2UYASABKAkyWAoORXZlbnRSZXBvcnRpbmcSRgoLUmVwb3J0RXZlbnQSFC5z",
            "dXJlc2VjdXJlaXZzLkV2ZW50Gh8uc3VyZXNlY3VyZWl2cy5SZXBvcnRFdmVu",
            "dFJlcGx5IgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Target), global::Suresecureivs.Target.Parser, new[]{ "X", "Y", "W", "H", "Type" }, null, new[]{ typeof(global::Suresecureivs.Target.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.AnnotatedImage), global::Suresecureivs.AnnotatedImage.Parser, new[]{ "Img", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Event), global::Suresecureivs.Event.Parser, new[]{ "Type", "Level", "Seconds", "Imgs", "Description", "Hostaddress", "Hostport", "Filename", "AnnoImgs" }, null, new[]{ typeof(global::Suresecureivs.Event.Types.Type), typeof(global::Suresecureivs.Event.Types.Level) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.ReportEventReply), global::Suresecureivs.ReportEventReply.Parser, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Target : pb::IMessage<Target> {
    private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
    public static pb::MessageParser<Target> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.EventReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Target() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Target(Target other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      w_ = other.w_;
      h_ = other.h_;
      type_ = other.type_;
    }

    public Target Clone() {
      return new Target(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private int w_;
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 4;
    private int h_;
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Suresecureivs.Target.Types.Type type_ = 0;
    public global::Suresecureivs.Target.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Target);
    }

    public bool Equals(Target other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (W != other.W) return false;
      if (H != other.H) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (W != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(H);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(Target other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            W = input.ReadInt32();
            break;
          }
          case 32: {
            H = input.ReadInt32();
            break;
          }
          case 40: {
            type_ = (global::Suresecureivs.Target.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Target message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("person")] Person = 0,
        [pbr::OriginalName("object")] Object = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AnnotatedImage : pb::IMessage<AnnotatedImage> {
    private static readonly pb::MessageParser<AnnotatedImage> _parser = new pb::MessageParser<AnnotatedImage>(() => new AnnotatedImage());
    public static pb::MessageParser<AnnotatedImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.EventReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AnnotatedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AnnotatedImage(AnnotatedImage other) : this() {
      img_ = other.img_;
      targets_ = other.targets_.Clone();
    }

    public AnnotatedImage Clone() {
      return new AnnotatedImage(this);
    }

    /// <summary>Field number for the "img" field.</summary>
    public const int ImgFieldNumber = 1;
    private pb::ByteString img_ = pb::ByteString.Empty;
    public pb::ByteString Img {
      get { return img_; }
      set {
        img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Suresecureivs.Target> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Suresecureivs.Target.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.Target> targets_ = new pbc::RepeatedField<global::Suresecureivs.Target>();
    public pbc::RepeatedField<global::Suresecureivs.Target> Targets {
      get { return targets_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AnnotatedImage);
    }

    public bool Equals(AnnotatedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Img != other.Img) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      hash ^= targets_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Img.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Img);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Img);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    public void MergeFrom(AnnotatedImage other) {
      if (other == null) {
        return;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      targets_.Add(other.targets_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Img = input.ReadBytes();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message containing the user's name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.EventReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Event(Event other) : this() {
      type_ = other.type_;
      level_ = other.level_;
      seconds_ = other.seconds_;
      imgs_ = other.imgs_.Clone();
      description_ = other.description_;
      hostaddress_ = other.hostaddress_;
      hostport_ = other.hostport_;
      filename_ = other.filename_;
      annoImgs_ = other.annoImgs_.Clone();
    }

    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Suresecureivs.Event.Types.Type type_ = 0;
    public global::Suresecureivs.Event.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private global::Suresecureivs.Event.Types.Level level_ = 0;
    public global::Suresecureivs.Event.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 3;
    private long seconds_;
    /// <summary>
    /// datetime
    /// </summary>
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "imgs" field.</summary>
    public const int ImgsFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_imgs_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> imgs_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// images
    /// </summary>
    public pbc::RepeatedField<pb::ByteString> Imgs {
      get { return imgs_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostaddress" field.</summary>
    public const int HostaddressFieldNumber = 6;
    private string hostaddress_ = "";
    public string Hostaddress {
      get { return hostaddress_; }
      set {
        hostaddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostport" field.</summary>
    public const int HostportFieldNumber = 7;
    private uint hostport_;
    public uint Hostport {
      get { return hostport_; }
      set {
        hostport_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 8;
    private string filename_ = "";
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anno_imgs" field.</summary>
    public const int AnnoImgsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Suresecureivs.AnnotatedImage> _repeated_annoImgs_codec
        = pb::FieldCodec.ForMessage(74, global::Suresecureivs.AnnotatedImage.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> annoImgs_ = new pbc::RepeatedField<global::Suresecureivs.AnnotatedImage>();
    public pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> AnnoImgs {
      get { return annoImgs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (Seconds != other.Seconds) return false;
      if(!imgs_.Equals(other.imgs_)) return false;
      if (Description != other.Description) return false;
      if (Hostaddress != other.Hostaddress) return false;
      if (Hostport != other.Hostport) return false;
      if (Filename != other.Filename) return false;
      if(!annoImgs_.Equals(other.annoImgs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      hash ^= imgs_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Hostaddress.Length != 0) hash ^= Hostaddress.GetHashCode();
      if (Hostport != 0) hash ^= Hostport.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      hash ^= annoImgs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Level);
      }
      if (Seconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Seconds);
      }
      imgs_.WriteTo(output, _repeated_imgs_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (Hostaddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Hostaddress);
      }
      if (Hostport != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Hostport);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Filename);
      }
      annoImgs_.WriteTo(output, _repeated_annoImgs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      size += imgs_.CalculateSize(_repeated_imgs_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Hostaddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostaddress);
      }
      if (Hostport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hostport);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      size += annoImgs_.CalculateSize(_repeated_annoImgs_codec);
      return size;
    }

    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      imgs_.Add(other.imgs_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Hostaddress.Length != 0) {
        Hostaddress = other.Hostaddress;
      }
      if (other.Hostport != 0) {
        Hostport = other.Hostport;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      annoImgs_.Add(other.annoImgs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Suresecureivs.Event.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            level_ = (global::Suresecureivs.Event.Types.Level) input.ReadEnum();
            break;
          }
          case 24: {
            Seconds = input.ReadInt64();
            break;
          }
          case 34: {
            imgs_.AddEntriesFrom(input, _repeated_imgs_codec);
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            Hostaddress = input.ReadString();
            break;
          }
          case 56: {
            Hostport = input.ReadUInt32();
            break;
          }
          case 66: {
            Filename = input.ReadString();
            break;
          }
          case 74: {
            annoImgs_.AddEntriesFrom(input, _repeated_annoImgs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("evt_none")] EvtNone = 0,
        /// <summary>
        ///  有人出现
        /// </summary>
        [pbr::OriginalName("evt_people_appr")] EvtPeopleAppr = 1,
        /// <summary>
        ///  视频模糊
        /// </summary>
        [pbr::OriginalName("evt_video_blur")] EvtVideoBlur = 2,
        /// <summary>
        ///  遗留物出现
        /// </summary>
        [pbr::OriginalName("evt_obj_appr")] EvtObjAppr = 3,
        /// <summary>
        ///  有人要识别
        /// </summary>
        [pbr::OriginalName("evt_people_rec")] EvtPeopleRec = 4,
        /// <summary>
        ///  有人戴墨镜
        /// </summary>
        [pbr::OriginalName("evt_odd_people_dg")] EvtOddPeopleDg = 5,
        /// <summary>
        ///  有人戴口罩
        /// </summary>
        [pbr::OriginalName("evt_odd_people_cv")] EvtOddPeopleCv = 6,
        /// <summary>
        ///  疑似假键盘
        /// </summary>
        [pbr::OriginalName("evt_fake_keyboard")] EvtFakeKeyboard = 7,
        /// <summary>
        ///  疑似假读卡器
        /// </summary>
        [pbr::OriginalName("evt_fake_cardreader")] EvtFakeCardreader = 8,
        /// <summary>
        ///  视频信号卡死
        /// </summary>
        [pbr::OriginalName("evt_video_crash")] EvtVideoCrash = 9,
        /// <summary>
        ///  视频信号丢失
        /// </summary>
        [pbr::OriginalName("evt_no_signal")] EvtNoSignal = 10,
        /// <summary>
        ///  有人被识别
        /// </summary>
        [pbr::OriginalName("evt_people_recd")] EvtPeopleRecd = 11,
        /// <summary>
        ///  有人戴丝袜
        /// </summary>
        [pbr::OriginalName("evt_odd_people_sw")] EvtOddPeopleSw = 12,
        /// <summary>
        ///  专门用于播放声音的事件，无意义，不存储
        /// </summary>
        [pbr::OriginalName("evt_playsound")] EvtPlaysound = 13,
        /// <summary>
        ///  未知异常人脸，由外加指导信号决定
        /// </summary>
        [pbr::OriginalName("evt_odd_people_un")] EvtOddPeopleUn = 14,
        /// <summary>
        ///  有正常人脸出现
        /// </summary>
        [pbr::OriginalName("evt_norm_people")] EvtNormPeople = 15,
        /// <summary>
        ///  有人倒地
        /// </summary>
        [pbr::OriginalName("evt_people_liedown")] EvtPeopleLiedown = 20,
        /// <summary>
        ///  有人跑步
        /// </summary>
        [pbr::OriginalName("evt_people_run")] EvtPeopleRun = 21,
        /// <summary>
        ///  有人尾随
        /// </summary>
        [pbr::OriginalName("evt_people_follow")] EvtPeopleFollow = 22,
        /// <summary>
        ///  有物滞留
        /// </summary>
        [pbr::OriginalName("evt_object_stay")] EvtObjectStay = 23,
        /// <summary>
        ///  有人徘徊
        /// </summary>
        [pbr::OriginalName("evt_people_wander")] EvtPeopleWander = 24,
        /// <summary>
        ///  有人打架
        /// </summary>
        [pbr::OriginalName("evt_people_fight")] EvtPeopleFight = 25,
        /// <summary>
        ///  防护区异常
        /// </summary>
        [pbr::OriginalName("evt_region_violate")] EvtRegionViolate = 26,
        /// <summary>
        ///  进入防护区
        /// </summary>
        [pbr::OriginalName("evt_region_in")] EvtRegionIn = 27,
        /// <summary>
        ///  离开防护区
        /// </summary>
        [pbr::OriginalName("evt_region_out")] EvtRegionOut = 28,
        /// <summary>
        ///  环境探测仪被遮挡
        /// </summary>
        [pbr::OriginalName("evt_depthcam_block")] EvtDepthcamBlock = 29,
        /// <summary>
        ///  防护区正常（重异常状态恢复为正常状态）
        /// </summary>
        [pbr::OriginalName("evt_region_normal")] EvtRegionNormal = 30,
        /// <summary>
        ///  监控区域内人数发生变化时报警
        /// </summary>
        [pbr::OriginalName("evt_people_cnt")] EvtPeopleCnt = 31,
        /// <summary>
        ///  打砸atm机
        /// </summary>
        [pbr::OriginalName("evt_hit_atm")] EvtHitAtm = 32,
        /// <summary>
        ///  传感器丢失
        /// </summary>
        [pbr::OriginalName("evt_sensor_lost")] EvtSensorLost = 33,
        /// <summary>
        ///  有人滞留
        /// </summary>
        [pbr::OriginalName("evt_people_stay")] EvtPeopleStay = 34,
        /// <summary>
        ///  区域强行进入
        /// </summary>
        [pbr::OriginalName("evt_region_in_vio")] EvtRegionInVio = 35,
        /// <summary>
        ///  摄像头被移动
        /// </summary>
        [pbr::OriginalName("evt_cam_move")] EvtCamMove = 36,
        /// <summary>
        ///  有人下蹲
        /// </summary>
        [pbr::OriginalName("evt_people_down")] EvtPeopleDown = 37,
        /// <summary>
        ///  人数过多
        /// </summary>
        [pbr::OriginalName("evt_people_cnt_up")] EvtPeopleCntUp = 38,
        /// <summary>
        ///  人数过少
        /// </summary>
        [pbr::OriginalName("evt_people_cnt_down")] EvtPeopleCntDown = 39,
        /// <summary>
        ///  尾随进入
        /// </summary>
        [pbr::OriginalName("evt_follow_in")] EvtFollowIn = 40,
        /// <summary>
        ///  假人出现（照片）
        /// </summary>
        [pbr::OriginalName("evt_fake_people")] EvtFakePeople = 41,
        /// <summary>
        ///  样本采集事件，这种事件的description要使用原有的，因为编码了相当多的信息
        /// </summary>
        [pbr::OriginalName("evt_sample")] EvtSample = 50,
      }

      public enum Level {
        [pbr::OriginalName("level_default")] Default = 0,
        [pbr::OriginalName("level_face_recognized")] FaceRecognized = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The response message containing the greetings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReportEventReply : pb::IMessage<ReportEventReply> {
    private static readonly pb::MessageParser<ReportEventReply> _parser = new pb::MessageParser<ReportEventReply>(() => new ReportEventReply());
    public static pb::MessageParser<ReportEventReply> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.EventReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReportEventReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReportEventReply(ReportEventReply other) : this() {
      message_ = other.message_;
    }

    public ReportEventReply Clone() {
      return new ReportEventReply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ReportEventReply);
    }

    public bool Equals(ReportEventReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(ReportEventReply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
