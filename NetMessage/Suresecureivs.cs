// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suresecureivs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Suresecureivs {

  /// <summary>Holder for reflection information generated from suresecureivs.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SuresecureivsReflection {

    #region Descriptor
    /// <summary>File descriptor for suresecureivs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SuresecureivsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNzdXJlc2VjdXJlaXZzLnByb3RvEg1zdXJlc2VjdXJlaXZzIgcKBUVtcHR5",
            "IjMKDEdlbmVyYWxSZXBseRISCgplcnJvcl9jb2RlGAEgASgFEg8KB21lc3Nh",
            "Z2UYAiABKAkiMAoPTmV0d29ya0VuZHBvaW50Eg8KB2FkZHJlc3MYASABKAkS",
            "DAoEcG9ydBgCIAEoBSIoChRHZXREZXZpY2VJbmZvUmVxdWVzdBIQCghmaWxl",
            "bmFtZRgBIAEoCSKbAQoSR2V0RGV2aWNlSW5mb1JlcGx5Eg8KB21lc3NhZ2UY",
            "ASABKAkSEQoJbm9kZV9uYW1lGAIgASgJEhAKCGRldl90eXBlGAMgASgJEg8K",
            "B25vZGVfb3MYBCABKAkSFQoNbWFqb3JfdmVyc2lvbhgFIAEoBRIVCg1taW5v",
            "cl92ZXJzaW9uGAYgASgFEhAKCHJldmlzaW9uGAcgASgFIk0KC05ldHdvcmtD",
            "b25mEg8KB2FkZHJlc3MYASABKAkSDwoHbmV0bWFzaxgCIAEoCRIPCgdnYXRl",
            "d2F5GAMgASgJEgsKA2RucxgEIAEoCSJAChBIZWFydGJlYXRSZXF1ZXN0EhYK",
            "DmRldmljZV9hZGRyZXNzGAEgASgJEhQKDGRldmljZV9pZGVudBgCIAEoCSLQ",
            "AQoGVGFyZ2V0EgkKAXgYASABKAUSCQoBeRgCIAEoBRIJCgF3GAMgASgFEgkK",
            "AWgYBCABKAUSKAoEdHlwZRgFIAEoDjIaLnN1cmVzZWN1cmVpdnMuVGFyZ2V0",
            "LlR5cGUSLAoGc3RhdHVzGAYgASgOMhwuc3VyZXNlY3VyZWl2cy5UYXJnZXQu",
            "U3RhdHVzIh4KBFR5cGUSCgoGUEVSU09OEAASCgoGT0JKRUNUEAEiIgoGU3Rh",
            "dHVzEgoKBk5PUk1BTBAAEgwKCEFCTk9STUFMEAEiuQEKC1NldHRpbmdBcmVh",
            "EiwKBHR5cGUYASABKA4yHi5zdXJlc2VjdXJlaXZzLlNldHRpbmdBcmVhVHlw",
            "ZRIJCgF4GAIgAygFEgkKAXkYAyADKAUSMQoGc3RhdHVzGAQgASgOMiEuc3Vy",
            "ZXNlY3VyZWl2cy5TZXR0aW5nQXJlYS5TdGF0dXMSDwoHY29tbWVudBgFIAEo",
            "CSIiCgZTdGF0dXMSCgoGTk9STUFMEAASDAoIQUJOT1JNQUwQASKJAQoOQW5u",
            "b3RhdGVkSW1hZ2USCwoDaW1nGAEgASgMEg8KB2NvbW1lbnQYAiABKAkSJgoH",
            "dGFyZ2V0cxgDIAMoCzIVLnN1cmVzZWN1cmVpdnMuVGFyZ2V0EjEKDXNldHRp",
            "bmdfYXJlYXMYBCADKAsyGi5zdXJlc2VjdXJlaXZzLlNldHRpbmdBcmVhIpUC",
            "CgVFdmVudBIMCgRndWlkGAEgASgJEgwKBHR5cGUYAiABKAUSDwoHc2Vjb25k",
            "cxgDIAEoAxITCgtkZXNjcmlwdGlvbhgEIAEoCRITCgtob3N0YWRkcmVzcxgF",
            "IAEoCRIPCgdjaGFubmVsGAYgASgFEhYKDnZpZGVvX2ZpbGVuYW1lGAcgASgJ",
            "EhgKEGZyb250ZW5kX3ZlcnNpb24YCCABKAkSMAoJYW5ub19pbWdzGAkgAygL",
            "Mh0uc3VyZXNlY3VyZWl2cy5Bbm5vdGF0ZWRJbWFnZRISCgpwZXJzb25fbnVt",
            "GAogASgFEhYKDm1ldGVyX2FyZWFfbnVtGAsgASgFEhQKDGRldmljZV9pZGVu",
            "dBgMIAEoCSL3AgoORXZlbnRGb3JTZXJ2ZXISKwoNZXZlbnRfY29udGVudBgB",
            "IAEoCzIULnN1cmVzZWN1cmVpdnMuRXZlbnQSNAoGc3RhdHVzGAIgASgOMiQu",
            "c3VyZXNlY3VyZWl2cy5FdmVudEZvclNlcnZlci5TdGF0dXMSEgoKcmVjdl9k",
            "dGltZRgDIAEoAxIUCgxoYW5kbGVfZHRpbWUYBCABKAMSDgoGcmVtYXJrGAUg",
            "ASgJEgoKAmlkGAYgASgFEhIKCmV2ZW50X2ZpbGUYByABKAkSFAoMdmVyaWZf",
            "cmVzdWx0GAggASgIIpEBCgZTdGF0dXMSCgoGbm9ybWFsEAASDgoKZmlsZV9z",
            "YXZlZBABEgwKCGRiX3NhdmVkEAISDwoLcXVldWVfc2F2ZWQQAxITCg9jbGll",
            "bnRfcmVjZWl2ZWQQBBIVChFjbGllbnRfcHJvY2Vzc2luZxAFEhIKDmNsaWVu",
            "dF9zdXNwZW5kEAYSDAoIY29tcGxldGUQZCKSAQoeU2V0TW9kdWxlUGVyaW9k",
            "RHVyYXRpb25SZXF1ZXN0EiwKCnNldF90YXJnZXQYASABKAsyGC5zdXJlc2Vj",
            "dXJlaXZzLlNldFRhcmdldBILCgNpZHgYAiABKAUSEgoKc3RhcnRfdGltZRgD",
            "IAEoAxIQCghlbmRfdGltZRgEIAEoAxIPCgdlbmFibGVkGAUgASgIIk0KElNp",
            "bXBsZVNldHRpbmdWYWx1ZRIPCgdpbnRfdmFsGAEgASgFEhIKCmRvdWJsZV92",
            "YWwYAiABKAESEgoKc3RyaW5nX3ZhbBgDIAEoCSJbChBQb2x5U2V0dGluZ1Zh",
            "bHVlEgkKAXgYAiADKAUSCQoBeRgDIAMoBRIxCgZwYXJhbXMYBCADKAsyIS5z",
            "dXJlc2VjdXJlaXZzLlNpbXBsZVNldHRpbmdWYWx1ZSJ8ChBTZXR0aW5nSXRl",
            "bVZhbHVlEjUKCnNpbXBsZV92YWwYAiABKAsyIS5zdXJlc2VjdXJlaXZzLlNp",
            "bXBsZVNldHRpbmdWYWx1ZRIxCghwb2x5X3ZhbBgDIAEoCzIfLnN1cmVzZWN1",
            "cmVpdnMuUG9seVNldHRpbmdWYWx1ZSJeChhTZXR0aW5nSXRlbVZhbHVlV2l0",
            "aE5hbWUSEgoKcGFyYW1fbmFtZRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnN1",
            "cmVzZWN1cmVpdnMuU2V0dGluZ0l0ZW1WYWx1ZSK+AQoPU2V0dGluZ0l0ZW1E",
            "ZXNjEgwKBG5hbWUYASABKAkSDwoHY29tbWVudBgCIAEoCRIwCgxzZXR0aW5n",
            "X3R5cGUYAyABKA4yGi5zdXJlc2VjdXJlaXZzLlNldHRpbmdUeXBlEg0KBXVw",
            "cGVyGAQgASgBEg0KBWxvd2VyGAUgASgBEg4KBmNob2ljZRgGIAMoCRIsCgN2",
            "YWwYByABKAsyHy5zdXJlc2VjdXJlaXZzLlNldHRpbmdJdGVtVmFsdWUiGAoJ",
            "UGVyaW9kSWR4EgsKA2lkeBgBIAEoBSJ1CgxQZXJpb2RQYXJhbXMSEgoKc3Rh",
            "cnRfdGltZRgBIAEoAxIQCghlbmRfdGltZRgCIAEoAxIPCgdlbmFibGVkGAMg",
            "ASgIEi4KBnBhcmFtcxgEIAMoCzIeLnN1cmVzZWN1cmVpdnMuU2V0dGluZ0l0",
            "ZW1EZXNjIokBCgpNb2R1bGVEZXNjEgwKBG5hbWUYASABKAkSDQoFaW5kZXgY",
            "AiABKAUSDwoHZW5hYmxlZBgDIAEoCBIZChFhY3RpdmVfcGVyaW9kX2lkeBgE",
            "IAEoBRIyCg1wZXJpb2RfcGFyYW1zGAUgAygLMhsuc3VyZXNlY3VyZWl2cy5Q",
            "ZXJpb2RQYXJhbXMi2gEKCFBvcnREZXNjEgwKBG5hbWUYASABKAkSCwoDbnVt",
            "GAIgASgFEioKBHR5cGUYAyABKA4yHC5zdXJlc2VjdXJlaXZzLlBvcnREZXNj",
            "LlR5cGUSKgoHbW9kdWxlcxgEIAMoCzIZLnN1cmVzZWN1cmVpdnMuTW9kdWxl",
            "RGVzYxIuCgZwYXJhbXMYBSADKAsyHi5zdXJlc2VjdXJlaXZzLlNldHRpbmdJ",
            "dGVtRGVzYyIrCgRUeXBlEgcKA0lOVhAAEgcKA0RFUBABEgcKA1JHQhACEggK",
            "BE5PREUQAyJiCghOb2RlRGVzYxIuCgZwYXJhbXMYASADKAsyHi5zdXJlc2Vj",
            "dXJlaXZzLlNldHRpbmdJdGVtRGVzYxImCgVwb3J0cxgCIAMoCzIXLnN1cmVz",
            "ZWN1cmVpdnMuUG9ydERlc2MiVwoWU2V0TW9kdWxlU3RhdHVzUmVxdWVzdBIs",
            "CgpzZXRfdGFyZ2V0GAEgASgLMhguc3VyZXNlY3VyZWl2cy5TZXRUYXJnZXQS",
            "DwoHZW5hYmxlZBgCIAEoCCJpCglTZXRUYXJnZXQSIwoFc2NvcGUYASABKA4y",
            "FC5zdXJlc2VjdXJlaXZzLlNDT1BFEgwKBHBvcnQYAiABKAUSDgoGbW9kdWxl",
            "GAMgASgFEhkKEW1vZHVsZV9wZXJpb2RfaWR4GAQgASgFIkkKDVJlaW5pdFJl",
            "cXVlc3QSKAoGdGFyZ2V0GAEgASgLMhguc3VyZXNlY3VyZWl2cy5TZXRUYXJn",
            "ZXQSDgoGZnJhbWVzGAIgASgFIooBCg9TZXRQYXJhbVJlcXVlc3QSKAoGdGFy",
            "Z2V0GAEgASgLMhguc3VyZXNlY3VyZWl2cy5TZXRUYXJnZXQSOQoIc2V0dGlu",
            "Z3MYAiADKAsyJy5zdXJlc2VjdXJlaXZzLlNldHRpbmdJdGVtVmFsdWVXaXRo",
            "TmFtZRISCgpwZXJpb2RfaWR4GAMgASgFKm8KD1NldHRpbmdBcmVhVHlwZRIO",
            "CgptZXRlcl9hcmVhEAASDgoKZ3VhcmRfYXJlYRABEg4KCmNyb3NzX2xpbmUQ",
            "AhIQCgxhdG1kb29yX2FyZWEQAxIaChZvYmplY3RfcHJvdGVjdGlvbl9hcmVh",
            "EAQqSAoLU2V0dGluZ1R5cGUSCwoHSW50ZWdlchAAEgoKBkRvdWJsZRABEgoK",
            "BlNlbGVjdBACEgoKBlN0cmluZxADEggKBFBvbHkQBCo5CgVTQ09QRRIOCgpT",
            "Q09QRV9OT0RFEAASDgoKU0NPUEVfUE9SVBABEhAKDFNDT1BFX01PRFVMRRAC",
            "MuoECglEZXZpY2VNZ3QSRwoQR2V0SGVhbHRoeVN0YXR1cxIULnN1cmVzZWN1",
            "cmVpdnMuRW1wdHkaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAEk8K",
            "FUdldEV2ZW50U2VydmVyQWRkcmVzcxIULnN1cmVzZWN1cmVpdnMuRW1wdHka",
            "Hi5zdXJlc2VjdXJlaXZzLk5ldHdvcmtFbmRwb2ludCIAElYKFVNldEV2ZW50",
            "U2VydmVyQWRkcmVzcxIeLnN1cmVzZWN1cmVpdnMuTmV0d29ya0VuZHBvaW50",
            "Ghsuc3VyZXNlY3VyZWl2cy5HZW5lcmFsUmVwbHkiABJZCg1HZXREZXZpY2VJ",
            "bmZvEiMuc3VyZXNlY3VyZWl2cy5HZXREZXZpY2VJbmZvUmVxdWVzdBohLnN1",
            "cmVzZWN1cmVpdnMuR2V0RGV2aWNlSW5mb1JlcGx5IgASRAoOR2V0TmV0d29y",
            "a0NvbmYSFC5zdXJlc2VjdXJlaXZzLkVtcHR5Ghouc3VyZXNlY3VyZWl2cy5O",
            "ZXR3b3JrQ29uZiIAEksKDlNldE5ldHdvcmtDb25mEhouc3VyZXNlY3VyZWl2",
            "cy5OZXR3b3JrQ29uZhobLnN1cmVzZWN1cmVpdnMuR2VuZXJhbFJlcGx5IgAS",
            "PQoGUmVib290EhQuc3VyZXNlY3VyZWl2cy5FbXB0eRobLnN1cmVzZWN1cmVp",
            "dnMuR2VuZXJhbFJlcGx5IgASPgoHUmVzdGFydBIULnN1cmVzZWN1cmVpdnMu",
            "RW1wdHkaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAMqQBChFTdXJ2",
            "Q2VudGVyU2VydmljZRJCCgtSZXBvcnRFdmVudBIULnN1cmVzZWN1cmVpdnMu",
            "RXZlbnQaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAEksKCUhlYXJ0",
            "YmVhdBIfLnN1cmVzZWN1cmVpdnMuSGVhcnRiZWF0UmVxdWVzdBobLnN1cmVz",
            "ZWN1cmVpdnMuR2VuZXJhbFJlcGx5IgAy0wQKCUFuYWx5dGljcxI+CgtHZXRO",
            "b2RlRGVzYxIULnN1cmVzZWN1cmVpdnMuRW1wdHkaFy5zdXJlc2VjdXJlaXZz",
            "Lk5vZGVEZXNjIgASRQoGUmVpbml0Ehwuc3VyZXNlY3VyZWl2cy5SZWluaXRS",
            "ZXF1ZXN0Ghsuc3VyZXNlY3VyZWl2cy5HZW5lcmFsUmVwbHkiABJXCg9TZXRN",
            "b2R1bGVTdGF0dXMSJS5zdXJlc2VjdXJlaXZzLlNldE1vZHVsZVN0YXR1c1Jl",
            "cXVlc3QaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAEmcKF1NldE1v",
            "ZHVsZVBlcmlvZER1cmF0aW9uEi0uc3VyZXNlY3VyZWl2cy5TZXRNb2R1bGVQ",
            "ZXJpb2REdXJhdGlvblJlcXVlc3QaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxS",
            "ZXBseSIAElcKHEZvcmNlTW9kdWxlQ3VycmVudFdvcmtQZXJpb2QSGC5zdXJl",
            "c2VjdXJlaXZzLlNldFRhcmdldBobLnN1cmVzZWN1cmVpdnMuR2VuZXJhbFJl",
            "cGx5IgASWQoeUmVzdG9yZU1vZHVsZUN1cnJlbnRXb3JrUGVyaW9kEhguc3Vy",
            "ZXNlY3VyZWl2cy5TZXRUYXJnZXQaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxS",
            "ZXBseSIAEkkKCFNldFBhcmFtEh4uc3VyZXNlY3VyZWl2cy5TZXRQYXJhbVJl",
            "cXVlc3QaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Suresecureivs.SettingAreaType), typeof(global::Suresecureivs.SettingType), typeof(global::Suresecureivs.SCOPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Empty), global::Suresecureivs.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.GeneralReply), global::Suresecureivs.GeneralReply.Parser, new[]{ "ErrorCode", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.NetworkEndpoint), global::Suresecureivs.NetworkEndpoint.Parser, new[]{ "Address", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.GetDeviceInfoRequest), global::Suresecureivs.GetDeviceInfoRequest.Parser, new[]{ "Filename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.GetDeviceInfoReply), global::Suresecureivs.GetDeviceInfoReply.Parser, new[]{ "Message", "NodeName", "DevType", "NodeOs", "MajorVersion", "MinorVersion", "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.NetworkConf), global::Suresecureivs.NetworkConf.Parser, new[]{ "Address", "Netmask", "Gateway", "Dns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.HeartbeatRequest), global::Suresecureivs.HeartbeatRequest.Parser, new[]{ "DeviceAddress", "DeviceIdent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Target), global::Suresecureivs.Target.Parser, new[]{ "X", "Y", "W", "H", "Type", "Status" }, null, new[]{ typeof(global::Suresecureivs.Target.Types.Type), typeof(global::Suresecureivs.Target.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SettingArea), global::Suresecureivs.SettingArea.Parser, new[]{ "Type", "X", "Y", "Status", "Comment" }, null, new[]{ typeof(global::Suresecureivs.SettingArea.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.AnnotatedImage), global::Suresecureivs.AnnotatedImage.Parser, new[]{ "Img", "Comment", "Targets", "SettingAreas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Event), global::Suresecureivs.Event.Parser, new[]{ "Guid", "Type", "Seconds", "Description", "Hostaddress", "Channel", "VideoFilename", "FrontendVersion", "AnnoImgs", "PersonNum", "MeterAreaNum", "DeviceIdent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.EventForServer), global::Suresecureivs.EventForServer.Parser, new[]{ "EventContent", "Status", "RecvDtime", "HandleDtime", "Remark", "Id", "EventFile", "VerifResult" }, null, new[]{ typeof(global::Suresecureivs.EventForServer.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SetModulePeriodDurationRequest), global::Suresecureivs.SetModulePeriodDurationRequest.Parser, new[]{ "SetTarget", "Idx", "StartTime", "EndTime", "Enabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SimpleSettingValue), global::Suresecureivs.SimpleSettingValue.Parser, new[]{ "IntVal", "DoubleVal", "StringVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.PolySettingValue), global::Suresecureivs.PolySettingValue.Parser, new[]{ "X", "Y", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SettingItemValue), global::Suresecureivs.SettingItemValue.Parser, new[]{ "SimpleVal", "PolyVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SettingItemValueWithName), global::Suresecureivs.SettingItemValueWithName.Parser, new[]{ "ParamName", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SettingItemDesc), global::Suresecureivs.SettingItemDesc.Parser, new[]{ "Name", "Comment", "SettingType", "Upper", "Lower", "Choice", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.PeriodIdx), global::Suresecureivs.PeriodIdx.Parser, new[]{ "Idx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.PeriodParams), global::Suresecureivs.PeriodParams.Parser, new[]{ "StartTime", "EndTime", "Enabled", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.ModuleDesc), global::Suresecureivs.ModuleDesc.Parser, new[]{ "Name", "Index", "Enabled", "ActivePeriodIdx", "PeriodParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.PortDesc), global::Suresecureivs.PortDesc.Parser, new[]{ "Name", "Num", "Type", "Modules", "Params" }, null, new[]{ typeof(global::Suresecureivs.PortDesc.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.NodeDesc), global::Suresecureivs.NodeDesc.Parser, new[]{ "Params", "Ports" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SetModuleStatusRequest), global::Suresecureivs.SetModuleStatusRequest.Parser, new[]{ "SetTarget", "Enabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SetTarget), global::Suresecureivs.SetTarget.Parser, new[]{ "Scope", "Port", "Module", "ModulePeriodIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.ReinitRequest), global::Suresecureivs.ReinitRequest.Parser, new[]{ "Target", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SetParamRequest), global::Suresecureivs.SetParamRequest.Parser, new[]{ "Target", "Settings", "PeriodIdx" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SettingAreaType {
    [pbr::OriginalName("meter_area")] MeterArea = 0,
    [pbr::OriginalName("guard_area")] GuardArea = 1,
    [pbr::OriginalName("cross_line")] CrossLine = 2,
    [pbr::OriginalName("atmdoor_area")] AtmdoorArea = 3,
    [pbr::OriginalName("object_protection_area")] ObjectProtectionArea = 4,
  }

  public enum SettingType {
    [pbr::OriginalName("Integer")] Integer = 0,
    [pbr::OriginalName("Double")] Double = 1,
    [pbr::OriginalName("Select")] Select = 2,
    [pbr::OriginalName("String")] String = 3,
    [pbr::OriginalName("Poly")] Poly = 4,
  }

  public enum SCOPE {
    [pbr::OriginalName("SCOPE_NODE")] Node = 0,
    [pbr::OriginalName("SCOPE_PORT")] Port = 1,
    [pbr::OriginalName("SCOPE_MODULE")] Module = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Empty(Empty other) : this() {
    }

    public Empty Clone() {
      return new Empty(this);
    }

    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GeneralReply : pb::IMessage<GeneralReply> {
    private static readonly pb::MessageParser<GeneralReply> _parser = new pb::MessageParser<GeneralReply>(() => new GeneralReply());
    public static pb::MessageParser<GeneralReply> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GeneralReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GeneralReply(GeneralReply other) : this() {
      errorCode_ = other.errorCode_;
      message_ = other.message_;
    }

    public GeneralReply Clone() {
      return new GeneralReply(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GeneralReply);
    }

    public bool Equals(GeneralReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(GeneralReply other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetworkEndpoint : pb::IMessage<NetworkEndpoint> {
    private static readonly pb::MessageParser<NetworkEndpoint> _parser = new pb::MessageParser<NetworkEndpoint>(() => new NetworkEndpoint());
    public static pb::MessageParser<NetworkEndpoint> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NetworkEndpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NetworkEndpoint(NetworkEndpoint other) : this() {
      address_ = other.address_;
      port_ = other.port_;
    }

    public NetworkEndpoint Clone() {
      return new NetworkEndpoint(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NetworkEndpoint);
    }

    public bool Equals(NetworkEndpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    public void MergeFrom(NetworkEndpoint other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message containing the user's name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetDeviceInfoRequest : pb::IMessage<GetDeviceInfoRequest> {
    private static readonly pb::MessageParser<GetDeviceInfoRequest> _parser = new pb::MessageParser<GetDeviceInfoRequest>(() => new GetDeviceInfoRequest());
    public static pb::MessageParser<GetDeviceInfoRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetDeviceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetDeviceInfoRequest(GetDeviceInfoRequest other) : this() {
      filename_ = other.filename_;
    }

    public GetDeviceInfoRequest Clone() {
      return new GetDeviceInfoRequest(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    private string filename_ = "";
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetDeviceInfoRequest);
    }

    public bool Equals(GetDeviceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Filename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      return size;
    }

    public void MergeFrom(GetDeviceInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response message containing the greetings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetDeviceInfoReply : pb::IMessage<GetDeviceInfoReply> {
    private static readonly pb::MessageParser<GetDeviceInfoReply> _parser = new pb::MessageParser<GetDeviceInfoReply>(() => new GetDeviceInfoReply());
    public static pb::MessageParser<GetDeviceInfoReply> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetDeviceInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetDeviceInfoReply(GetDeviceInfoReply other) : this() {
      message_ = other.message_;
      nodeName_ = other.nodeName_;
      devType_ = other.devType_;
      nodeOs_ = other.nodeOs_;
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      revision_ = other.revision_;
    }

    public GetDeviceInfoReply Clone() {
      return new GetDeviceInfoReply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 2;
    private string nodeName_ = "";
    /// <summary>
    ///  device name
    /// </summary>
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dev_type" field.</summary>
    public const int DevTypeFieldNumber = 3;
    private string devType_ = "";
    /// <summary>
    ///  device model
    /// </summary>
    public string DevType {
      get { return devType_; }
      set {
        devType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_os" field.</summary>
    public const int NodeOsFieldNumber = 4;
    private string nodeOs_ = "";
    /// <summary>
    ///  OS version
    /// </summary>
    public string NodeOs {
      get { return nodeOs_; }
      set {
        nodeOs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 5;
    private int majorVersion_;
    /// <summary>
    ///  version
    /// </summary>
    public int MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 6;
    private int minorVersion_;
    public int MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 7;
    private int revision_;
    public int Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetDeviceInfoReply);
    }

    public bool Equals(GetDeviceInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (NodeName != other.NodeName) return false;
      if (DevType != other.DevType) return false;
      if (NodeOs != other.NodeOs) return false;
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (Revision != other.Revision) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (DevType.Length != 0) hash ^= DevType.GetHashCode();
      if (NodeOs.Length != 0) hash ^= NodeOs.GetHashCode();
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (Revision != 0) hash ^= Revision.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NodeName);
      }
      if (DevType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DevType);
      }
      if (NodeOs.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NodeOs);
      }
      if (MajorVersion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MinorVersion);
      }
      if (Revision != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Revision);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (DevType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DevType);
      }
      if (NodeOs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeOs);
      }
      if (MajorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinorVersion);
      }
      if (Revision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Revision);
      }
      return size;
    }

    public void MergeFrom(GetDeviceInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.DevType.Length != 0) {
        DevType = other.DevType;
      }
      if (other.NodeOs.Length != 0) {
        NodeOs = other.NodeOs;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.Revision != 0) {
        Revision = other.Revision;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            NodeName = input.ReadString();
            break;
          }
          case 26: {
            DevType = input.ReadString();
            break;
          }
          case 34: {
            NodeOs = input.ReadString();
            break;
          }
          case 40: {
            MajorVersion = input.ReadInt32();
            break;
          }
          case 48: {
            MinorVersion = input.ReadInt32();
            break;
          }
          case 56: {
            Revision = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetworkConf : pb::IMessage<NetworkConf> {
    private static readonly pb::MessageParser<NetworkConf> _parser = new pb::MessageParser<NetworkConf>(() => new NetworkConf());
    public static pb::MessageParser<NetworkConf> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NetworkConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NetworkConf(NetworkConf other) : this() {
      address_ = other.address_;
      netmask_ = other.netmask_;
      gateway_ = other.gateway_;
      dns_ = other.dns_;
    }

    public NetworkConf Clone() {
      return new NetworkConf(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "netmask" field.</summary>
    public const int NetmaskFieldNumber = 2;
    private string netmask_ = "";
    public string Netmask {
      get { return netmask_; }
      set {
        netmask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway" field.</summary>
    public const int GatewayFieldNumber = 3;
    private string gateway_ = "";
    public string Gateway {
      get { return gateway_; }
      set {
        gateway_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dns" field.</summary>
    public const int DnsFieldNumber = 4;
    private string dns_ = "";
    public string Dns {
      get { return dns_; }
      set {
        dns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NetworkConf);
    }

    public bool Equals(NetworkConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Netmask != other.Netmask) return false;
      if (Gateway != other.Gateway) return false;
      if (Dns != other.Dns) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Netmask.Length != 0) hash ^= Netmask.GetHashCode();
      if (Gateway.Length != 0) hash ^= Gateway.GetHashCode();
      if (Dns.Length != 0) hash ^= Dns.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Netmask.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Netmask);
      }
      if (Gateway.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Gateway);
      }
      if (Dns.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Dns);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Netmask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Netmask);
      }
      if (Gateway.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gateway);
      }
      if (Dns.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dns);
      }
      return size;
    }

    public void MergeFrom(NetworkConf other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Netmask.Length != 0) {
        Netmask = other.Netmask;
      }
      if (other.Gateway.Length != 0) {
        Gateway = other.Gateway;
      }
      if (other.Dns.Length != 0) {
        Dns = other.Dns;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            Netmask = input.ReadString();
            break;
          }
          case 26: {
            Gateway = input.ReadString();
            break;
          }
          case 34: {
            Dns = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartbeatRequest : pb::IMessage<HeartbeatRequest> {
    private static readonly pb::MessageParser<HeartbeatRequest> _parser = new pb::MessageParser<HeartbeatRequest>(() => new HeartbeatRequest());
    public static pb::MessageParser<HeartbeatRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HeartbeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HeartbeatRequest(HeartbeatRequest other) : this() {
      deviceAddress_ = other.deviceAddress_;
      deviceIdent_ = other.deviceIdent_;
    }

    public HeartbeatRequest Clone() {
      return new HeartbeatRequest(this);
    }

    /// <summary>Field number for the "device_address" field.</summary>
    public const int DeviceAddressFieldNumber = 1;
    private string deviceAddress_ = "";
    public string DeviceAddress {
      get { return deviceAddress_; }
      set {
        deviceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_ident" field.</summary>
    public const int DeviceIdentFieldNumber = 2;
    private string deviceIdent_ = "";
    public string DeviceIdent {
      get { return deviceIdent_; }
      set {
        deviceIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HeartbeatRequest);
    }

    public bool Equals(HeartbeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceAddress != other.DeviceAddress) return false;
      if (DeviceIdent != other.DeviceIdent) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DeviceAddress.Length != 0) hash ^= DeviceAddress.GetHashCode();
      if (DeviceIdent.Length != 0) hash ^= DeviceIdent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceAddress);
      }
      if (DeviceIdent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceIdent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DeviceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceAddress);
      }
      if (DeviceIdent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIdent);
      }
      return size;
    }

    public void MergeFrom(HeartbeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceAddress.Length != 0) {
        DeviceAddress = other.DeviceAddress;
      }
      if (other.DeviceIdent.Length != 0) {
        DeviceIdent = other.DeviceIdent;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceAddress = input.ReadString();
            break;
          }
          case 18: {
            DeviceIdent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Target : pb::IMessage<Target> {
    private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
    public static pb::MessageParser<Target> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Target() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Target(Target other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      w_ = other.w_;
      h_ = other.h_;
      type_ = other.type_;
      status_ = other.status_;
    }

    public Target Clone() {
      return new Target(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private int w_;
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 4;
    private int h_;
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Suresecureivs.Target.Types.Type type_ = 0;
    public global::Suresecureivs.Target.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Suresecureivs.Target.Types.Status status_ = 0;
    public global::Suresecureivs.Target.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Target);
    }

    public bool Equals(Target other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (W != other.W) return false;
      if (H != other.H) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (W != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(H);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    public void MergeFrom(Target other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            W = input.ReadInt32();
            break;
          }
          case 32: {
            H = input.ReadInt32();
            break;
          }
          case 40: {
            type_ = (global::Suresecureivs.Target.Types.Type) input.ReadEnum();
            break;
          }
          case 48: {
            status_ = (global::Suresecureivs.Target.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Target message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("PERSON")] Person = 0,
        [pbr::OriginalName("OBJECT")] Object = 1,
      }

      public enum Status {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("ABNORMAL")] Abnormal = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingArea : pb::IMessage<SettingArea> {
    private static readonly pb::MessageParser<SettingArea> _parser = new pb::MessageParser<SettingArea>(() => new SettingArea());
    public static pb::MessageParser<SettingArea> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SettingArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SettingArea(SettingArea other) : this() {
      type_ = other.type_;
      x_ = other.x_.Clone();
      y_ = other.y_.Clone();
      status_ = other.status_;
      comment_ = other.comment_;
    }

    public SettingArea Clone() {
      return new SettingArea(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Suresecureivs.SettingAreaType type_ = 0;
    public global::Suresecureivs.SettingAreaType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_x_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> x_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> X {
      get { return x_; }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_y_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> y_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Y {
      get { return y_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Suresecureivs.SettingArea.Types.Status status_ = 0;
    public global::Suresecureivs.SettingArea.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 5;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SettingArea);
    }

    public bool Equals(SettingArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!x_.Equals(other.x_)) return false;
      if(!y_.Equals(other.y_)) return false;
      if (Status != other.Status) return false;
      if (Comment != other.Comment) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= x_.GetHashCode();
      hash ^= y_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      x_.WriteTo(output, _repeated_x_codec);
      y_.WriteTo(output, _repeated_y_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += x_.CalculateSize(_repeated_x_codec);
      size += y_.CalculateSize(_repeated_y_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      return size;
    }

    public void MergeFrom(SettingArea other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      x_.Add(other.x_);
      y_.Add(other.y_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Suresecureivs.SettingAreaType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            x_.AddEntriesFrom(input, _repeated_x_codec);
            break;
          }
          case 26:
          case 24: {
            y_.AddEntriesFrom(input, _repeated_y_codec);
            break;
          }
          case 32: {
            status_ = (global::Suresecureivs.SettingArea.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SettingArea message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("ABNORMAL")] Abnormal = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AnnotatedImage : pb::IMessage<AnnotatedImage> {
    private static readonly pb::MessageParser<AnnotatedImage> _parser = new pb::MessageParser<AnnotatedImage>(() => new AnnotatedImage());
    public static pb::MessageParser<AnnotatedImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AnnotatedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AnnotatedImage(AnnotatedImage other) : this() {
      img_ = other.img_;
      comment_ = other.comment_;
      targets_ = other.targets_.Clone();
      settingAreas_ = other.settingAreas_.Clone();
    }

    public AnnotatedImage Clone() {
      return new AnnotatedImage(this);
    }

    /// <summary>Field number for the "img" field.</summary>
    public const int ImgFieldNumber = 1;
    private pb::ByteString img_ = pb::ByteString.Empty;
    public pb::ByteString Img {
      get { return img_; }
      set {
        img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 2;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Suresecureivs.Target> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::Suresecureivs.Target.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.Target> targets_ = new pbc::RepeatedField<global::Suresecureivs.Target>();
    public pbc::RepeatedField<global::Suresecureivs.Target> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "setting_areas" field.</summary>
    public const int SettingAreasFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingArea> _repeated_settingAreas_codec
        = pb::FieldCodec.ForMessage(34, global::Suresecureivs.SettingArea.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingArea> settingAreas_ = new pbc::RepeatedField<global::Suresecureivs.SettingArea>();
    public pbc::RepeatedField<global::Suresecureivs.SettingArea> SettingAreas {
      get { return settingAreas_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AnnotatedImage);
    }

    public bool Equals(AnnotatedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Img != other.Img) return false;
      if (Comment != other.Comment) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if(!settingAreas_.Equals(other.settingAreas_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      hash ^= targets_.GetHashCode();
      hash ^= settingAreas_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Img.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Img);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comment);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      settingAreas_.WriteTo(output, _repeated_settingAreas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Img);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      size += settingAreas_.CalculateSize(_repeated_settingAreas_codec);
      return size;
    }

    public void MergeFrom(AnnotatedImage other) {
      if (other == null) {
        return;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      targets_.Add(other.targets_);
      settingAreas_.Add(other.settingAreas_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Img = input.ReadBytes();
            break;
          }
          case 18: {
            Comment = input.ReadString();
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 34: {
            settingAreas_.AddEntriesFrom(input, _repeated_settingAreas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message containing the user's name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Event(Event other) : this() {
      guid_ = other.guid_;
      type_ = other.type_;
      seconds_ = other.seconds_;
      description_ = other.description_;
      hostaddress_ = other.hostaddress_;
      channel_ = other.channel_;
      videoFilename_ = other.videoFilename_;
      frontendVersion_ = other.frontendVersion_;
      annoImgs_ = other.annoImgs_.Clone();
      personNum_ = other.personNum_;
      meterAreaNum_ = other.meterAreaNum_;
      deviceIdent_ = other.deviceIdent_;
    }

    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 3;
    private long seconds_;
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostaddress" field.</summary>
    public const int HostaddressFieldNumber = 5;
    private string hostaddress_ = "";
    public string Hostaddress {
      get { return hostaddress_; }
      set {
        hostaddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 6;
    private int channel_;
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "video_filename" field.</summary>
    public const int VideoFilenameFieldNumber = 7;
    private string videoFilename_ = "";
    public string VideoFilename {
      get { return videoFilename_; }
      set {
        videoFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frontend_version" field.</summary>
    public const int FrontendVersionFieldNumber = 8;
    private string frontendVersion_ = "";
    public string FrontendVersion {
      get { return frontendVersion_; }
      set {
        frontendVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anno_imgs" field.</summary>
    public const int AnnoImgsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Suresecureivs.AnnotatedImage> _repeated_annoImgs_codec
        = pb::FieldCodec.ForMessage(74, global::Suresecureivs.AnnotatedImage.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> annoImgs_ = new pbc::RepeatedField<global::Suresecureivs.AnnotatedImage>();
    public pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> AnnoImgs {
      get { return annoImgs_; }
    }

    /// <summary>Field number for the "person_num" field.</summary>
    public const int PersonNumFieldNumber = 10;
    private int personNum_;
    public int PersonNum {
      get { return personNum_; }
      set {
        personNum_ = value;
      }
    }

    /// <summary>Field number for the "meter_area_num" field.</summary>
    public const int MeterAreaNumFieldNumber = 11;
    private int meterAreaNum_;
    public int MeterAreaNum {
      get { return meterAreaNum_; }
      set {
        meterAreaNum_ = value;
      }
    }

    /// <summary>Field number for the "device_ident" field.</summary>
    public const int DeviceIdentFieldNumber = 12;
    private string deviceIdent_ = "";
    public string DeviceIdent {
      get { return deviceIdent_; }
      set {
        deviceIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      if (Seconds != other.Seconds) return false;
      if (Description != other.Description) return false;
      if (Hostaddress != other.Hostaddress) return false;
      if (Channel != other.Channel) return false;
      if (VideoFilename != other.VideoFilename) return false;
      if (FrontendVersion != other.FrontendVersion) return false;
      if(!annoImgs_.Equals(other.annoImgs_)) return false;
      if (PersonNum != other.PersonNum) return false;
      if (MeterAreaNum != other.MeterAreaNum) return false;
      if (DeviceIdent != other.DeviceIdent) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Hostaddress.Length != 0) hash ^= Hostaddress.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (VideoFilename.Length != 0) hash ^= VideoFilename.GetHashCode();
      if (FrontendVersion.Length != 0) hash ^= FrontendVersion.GetHashCode();
      hash ^= annoImgs_.GetHashCode();
      if (PersonNum != 0) hash ^= PersonNum.GetHashCode();
      if (MeterAreaNum != 0) hash ^= MeterAreaNum.GetHashCode();
      if (DeviceIdent.Length != 0) hash ^= DeviceIdent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Seconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Seconds);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Hostaddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Hostaddress);
      }
      if (Channel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Channel);
      }
      if (VideoFilename.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VideoFilename);
      }
      if (FrontendVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FrontendVersion);
      }
      annoImgs_.WriteTo(output, _repeated_annoImgs_codec);
      if (PersonNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PersonNum);
      }
      if (MeterAreaNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MeterAreaNum);
      }
      if (DeviceIdent.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DeviceIdent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Hostaddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostaddress);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (VideoFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoFilename);
      }
      if (FrontendVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontendVersion);
      }
      size += annoImgs_.CalculateSize(_repeated_annoImgs_codec);
      if (PersonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonNum);
      }
      if (MeterAreaNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeterAreaNum);
      }
      if (DeviceIdent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIdent);
      }
      return size;
    }

    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Hostaddress.Length != 0) {
        Hostaddress = other.Hostaddress;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.VideoFilename.Length != 0) {
        VideoFilename = other.VideoFilename;
      }
      if (other.FrontendVersion.Length != 0) {
        FrontendVersion = other.FrontendVersion;
      }
      annoImgs_.Add(other.annoImgs_);
      if (other.PersonNum != 0) {
        PersonNum = other.PersonNum;
      }
      if (other.MeterAreaNum != 0) {
        MeterAreaNum = other.MeterAreaNum;
      }
      if (other.DeviceIdent.Length != 0) {
        DeviceIdent = other.DeviceIdent;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Seconds = input.ReadInt64();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Hostaddress = input.ReadString();
            break;
          }
          case 48: {
            Channel = input.ReadInt32();
            break;
          }
          case 58: {
            VideoFilename = input.ReadString();
            break;
          }
          case 66: {
            FrontendVersion = input.ReadString();
            break;
          }
          case 74: {
            annoImgs_.AddEntriesFrom(input, _repeated_annoImgs_codec);
            break;
          }
          case 80: {
            PersonNum = input.ReadInt32();
            break;
          }
          case 88: {
            MeterAreaNum = input.ReadInt32();
            break;
          }
          case 98: {
            DeviceIdent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EventForServer : pb::IMessage<EventForServer> {
    private static readonly pb::MessageParser<EventForServer> _parser = new pb::MessageParser<EventForServer>(() => new EventForServer());
    public static pb::MessageParser<EventForServer> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EventForServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EventForServer(EventForServer other) : this() {
      EventContent = other.eventContent_ != null ? other.EventContent.Clone() : null;
      status_ = other.status_;
      recvDtime_ = other.recvDtime_;
      handleDtime_ = other.handleDtime_;
      remark_ = other.remark_;
      id_ = other.id_;
      eventFile_ = other.eventFile_;
      verifResult_ = other.verifResult_;
    }

    public EventForServer Clone() {
      return new EventForServer(this);
    }

    /// <summary>Field number for the "event_content" field.</summary>
    public const int EventContentFieldNumber = 1;
    private global::Suresecureivs.Event eventContent_;
    public global::Suresecureivs.Event EventContent {
      get { return eventContent_; }
      set {
        eventContent_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Suresecureivs.EventForServer.Types.Status status_ = 0;
    public global::Suresecureivs.EventForServer.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "recv_dtime" field.</summary>
    public const int RecvDtimeFieldNumber = 3;
    private long recvDtime_;
    public long RecvDtime {
      get { return recvDtime_; }
      set {
        recvDtime_ = value;
      }
    }

    /// <summary>Field number for the "handle_dtime" field.</summary>
    public const int HandleDtimeFieldNumber = 4;
    private long handleDtime_;
    public long HandleDtime {
      get { return handleDtime_; }
      set {
        handleDtime_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 5;
    private string remark_ = "";
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "event_file" field.</summary>
    public const int EventFileFieldNumber = 7;
    private string eventFile_ = "";
    public string EventFile {
      get { return eventFile_; }
      set {
        eventFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verif_result" field.</summary>
    public const int VerifResultFieldNumber = 8;
    private bool verifResult_;
    public bool VerifResult {
      get { return verifResult_; }
      set {
        verifResult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EventForServer);
    }

    public bool Equals(EventForServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventContent, other.EventContent)) return false;
      if (Status != other.Status) return false;
      if (RecvDtime != other.RecvDtime) return false;
      if (HandleDtime != other.HandleDtime) return false;
      if (Remark != other.Remark) return false;
      if (Id != other.Id) return false;
      if (EventFile != other.EventFile) return false;
      if (VerifResult != other.VerifResult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (eventContent_ != null) hash ^= EventContent.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RecvDtime != 0L) hash ^= RecvDtime.GetHashCode();
      if (HandleDtime != 0L) hash ^= HandleDtime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventFile.Length != 0) hash ^= EventFile.GetHashCode();
      if (VerifResult != false) hash ^= VerifResult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (eventContent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventContent);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (RecvDtime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RecvDtime);
      }
      if (HandleDtime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HandleDtime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remark);
      }
      if (Id != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Id);
      }
      if (EventFile.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(EventFile);
      }
      if (VerifResult != false) {
        output.WriteRawTag(64);
        output.WriteBool(VerifResult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (eventContent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventContent);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RecvDtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecvDtime);
      }
      if (HandleDtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandleDtime);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventFile);
      }
      if (VerifResult != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(EventForServer other) {
      if (other == null) {
        return;
      }
      if (other.eventContent_ != null) {
        if (eventContent_ == null) {
          eventContent_ = new global::Suresecureivs.Event();
        }
        EventContent.MergeFrom(other.EventContent);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RecvDtime != 0L) {
        RecvDtime = other.RecvDtime;
      }
      if (other.HandleDtime != 0L) {
        HandleDtime = other.HandleDtime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventFile.Length != 0) {
        EventFile = other.EventFile;
      }
      if (other.VerifResult != false) {
        VerifResult = other.VerifResult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (eventContent_ == null) {
              eventContent_ = new global::Suresecureivs.Event();
            }
            input.ReadMessage(eventContent_);
            break;
          }
          case 16: {
            status_ = (global::Suresecureivs.EventForServer.Types.Status) input.ReadEnum();
            break;
          }
          case 24: {
            RecvDtime = input.ReadInt64();
            break;
          }
          case 32: {
            HandleDtime = input.ReadInt64();
            break;
          }
          case 42: {
            Remark = input.ReadString();
            break;
          }
          case 48: {
            Id = input.ReadInt32();
            break;
          }
          case 58: {
            EventFile = input.ReadString();
            break;
          }
          case 64: {
            VerifResult = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventForServer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      /// <summary>
      /// reserved for server
      /// </summary>
      public enum Status {
        [pbr::OriginalName("normal")] Normal = 0,
        [pbr::OriginalName("file_saved")] FileSaved = 1,
        [pbr::OriginalName("db_saved")] DbSaved = 2,
        [pbr::OriginalName("queue_saved")] QueueSaved = 3,
        [pbr::OriginalName("client_received")] ClientReceived = 4,
        [pbr::OriginalName("client_processing")] ClientProcessing = 5,
        [pbr::OriginalName("client_suspend")] ClientSuspend = 6,
        [pbr::OriginalName("complete")] Complete = 100,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetModulePeriodDurationRequest : pb::IMessage<SetModulePeriodDurationRequest> {
    private static readonly pb::MessageParser<SetModulePeriodDurationRequest> _parser = new pb::MessageParser<SetModulePeriodDurationRequest>(() => new SetModulePeriodDurationRequest());
    public static pb::MessageParser<SetModulePeriodDurationRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SetModulePeriodDurationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SetModulePeriodDurationRequest(SetModulePeriodDurationRequest other) : this() {
      SetTarget = other.setTarget_ != null ? other.SetTarget.Clone() : null;
      idx_ = other.idx_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      enabled_ = other.enabled_;
    }

    public SetModulePeriodDurationRequest Clone() {
      return new SetModulePeriodDurationRequest(this);
    }

    /// <summary>Field number for the "set_target" field.</summary>
    public const int SetTargetFieldNumber = 1;
    private global::Suresecureivs.SetTarget setTarget_;
    public global::Suresecureivs.SetTarget SetTarget {
      get { return setTarget_; }
      set {
        setTarget_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 2;
    private int idx_;
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 5;
    private bool enabled_;
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SetModulePeriodDurationRequest);
    }

    public bool Equals(SetModulePeriodDurationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SetTarget, other.SetTarget)) return false;
      if (Idx != other.Idx) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Enabled != other.Enabled) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (setTarget_ != null) hash ^= SetTarget.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (setTarget_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SetTarget);
      }
      if (Idx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (Enabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Enabled);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (setTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetTarget);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(SetModulePeriodDurationRequest other) {
      if (other == null) {
        return;
      }
      if (other.setTarget_ != null) {
        if (setTarget_ == null) {
          setTarget_ = new global::Suresecureivs.SetTarget();
        }
        SetTarget.MergeFrom(other.SetTarget);
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (setTarget_ == null) {
              setTarget_ = new global::Suresecureivs.SetTarget();
            }
            input.ReadMessage(setTarget_);
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleSettingValue : pb::IMessage<SimpleSettingValue> {
    private static readonly pb::MessageParser<SimpleSettingValue> _parser = new pb::MessageParser<SimpleSettingValue>(() => new SimpleSettingValue());
    public static pb::MessageParser<SimpleSettingValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SimpleSettingValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SimpleSettingValue(SimpleSettingValue other) : this() {
      intVal_ = other.intVal_;
      doubleVal_ = other.doubleVal_;
      stringVal_ = other.stringVal_;
    }

    public SimpleSettingValue Clone() {
      return new SimpleSettingValue(this);
    }

    /// <summary>Field number for the "int_val" field.</summary>
    public const int IntValFieldNumber = 1;
    private int intVal_;
    public int IntVal {
      get { return intVal_; }
      set {
        intVal_ = value;
      }
    }

    /// <summary>Field number for the "double_val" field.</summary>
    public const int DoubleValFieldNumber = 2;
    private double doubleVal_;
    public double DoubleVal {
      get { return doubleVal_; }
      set {
        doubleVal_ = value;
      }
    }

    /// <summary>Field number for the "string_val" field.</summary>
    public const int StringValFieldNumber = 3;
    private string stringVal_ = "";
    public string StringVal {
      get { return stringVal_; }
      set {
        stringVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SimpleSettingValue);
    }

    public bool Equals(SimpleSettingValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal != other.IntVal) return false;
      if (DoubleVal != other.DoubleVal) return false;
      if (StringVal != other.StringVal) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IntVal != 0) hash ^= IntVal.GetHashCode();
      if (DoubleVal != 0D) hash ^= DoubleVal.GetHashCode();
      if (StringVal.Length != 0) hash ^= StringVal.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IntVal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal);
      }
      if (DoubleVal != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleVal);
      }
      if (StringVal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StringVal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IntVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal);
      }
      if (DoubleVal != 0D) {
        size += 1 + 8;
      }
      if (StringVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringVal);
      }
      return size;
    }

    public void MergeFrom(SimpleSettingValue other) {
      if (other == null) {
        return;
      }
      if (other.IntVal != 0) {
        IntVal = other.IntVal;
      }
      if (other.DoubleVal != 0D) {
        DoubleVal = other.DoubleVal;
      }
      if (other.StringVal.Length != 0) {
        StringVal = other.StringVal;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntVal = input.ReadInt32();
            break;
          }
          case 17: {
            DoubleVal = input.ReadDouble();
            break;
          }
          case 26: {
            StringVal = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PolySettingValue : pb::IMessage<PolySettingValue> {
    private static readonly pb::MessageParser<PolySettingValue> _parser = new pb::MessageParser<PolySettingValue>(() => new PolySettingValue());
    public static pb::MessageParser<PolySettingValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PolySettingValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PolySettingValue(PolySettingValue other) : this() {
      x_ = other.x_.Clone();
      y_ = other.y_.Clone();
      params_ = other.params_.Clone();
    }

    public PolySettingValue Clone() {
      return new PolySettingValue(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_x_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> x_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> X {
      get { return x_; }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_y_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> y_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Y {
      get { return y_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Suresecureivs.SimpleSettingValue> _repeated_params_codec
        = pb::FieldCodec.ForMessage(34, global::Suresecureivs.SimpleSettingValue.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SimpleSettingValue> params_ = new pbc::RepeatedField<global::Suresecureivs.SimpleSettingValue>();
    public pbc::RepeatedField<global::Suresecureivs.SimpleSettingValue> Params {
      get { return params_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PolySettingValue);
    }

    public bool Equals(PolySettingValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!x_.Equals(other.x_)) return false;
      if(!y_.Equals(other.y_)) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= x_.GetHashCode();
      hash ^= y_.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      x_.WriteTo(output, _repeated_x_codec);
      y_.WriteTo(output, _repeated_y_codec);
      params_.WriteTo(output, _repeated_params_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += x_.CalculateSize(_repeated_x_codec);
      size += y_.CalculateSize(_repeated_y_codec);
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    public void MergeFrom(PolySettingValue other) {
      if (other == null) {
        return;
      }
      x_.Add(other.x_);
      y_.Add(other.y_);
      params_.Add(other.params_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18:
          case 16: {
            x_.AddEntriesFrom(input, _repeated_x_codec);
            break;
          }
          case 26:
          case 24: {
            y_.AddEntriesFrom(input, _repeated_y_codec);
            break;
          }
          case 34: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingItemValue : pb::IMessage<SettingItemValue> {
    private static readonly pb::MessageParser<SettingItemValue> _parser = new pb::MessageParser<SettingItemValue>(() => new SettingItemValue());
    public static pb::MessageParser<SettingItemValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SettingItemValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SettingItemValue(SettingItemValue other) : this() {
      SimpleVal = other.simpleVal_ != null ? other.SimpleVal.Clone() : null;
      PolyVal = other.polyVal_ != null ? other.PolyVal.Clone() : null;
    }

    public SettingItemValue Clone() {
      return new SettingItemValue(this);
    }

    /// <summary>Field number for the "simple_val" field.</summary>
    public const int SimpleValFieldNumber = 2;
    private global::Suresecureivs.SimpleSettingValue simpleVal_;
    public global::Suresecureivs.SimpleSettingValue SimpleVal {
      get { return simpleVal_; }
      set {
        simpleVal_ = value;
      }
    }

    /// <summary>Field number for the "poly_val" field.</summary>
    public const int PolyValFieldNumber = 3;
    private global::Suresecureivs.PolySettingValue polyVal_;
    public global::Suresecureivs.PolySettingValue PolyVal {
      get { return polyVal_; }
      set {
        polyVal_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SettingItemValue);
    }

    public bool Equals(SettingItemValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SimpleVal, other.SimpleVal)) return false;
      if (!object.Equals(PolyVal, other.PolyVal)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (simpleVal_ != null) hash ^= SimpleVal.GetHashCode();
      if (polyVal_ != null) hash ^= PolyVal.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (simpleVal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleVal);
      }
      if (polyVal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PolyVal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (simpleVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleVal);
      }
      if (polyVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PolyVal);
      }
      return size;
    }

    public void MergeFrom(SettingItemValue other) {
      if (other == null) {
        return;
      }
      if (other.simpleVal_ != null) {
        if (simpleVal_ == null) {
          simpleVal_ = new global::Suresecureivs.SimpleSettingValue();
        }
        SimpleVal.MergeFrom(other.SimpleVal);
      }
      if (other.polyVal_ != null) {
        if (polyVal_ == null) {
          polyVal_ = new global::Suresecureivs.PolySettingValue();
        }
        PolyVal.MergeFrom(other.PolyVal);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (simpleVal_ == null) {
              simpleVal_ = new global::Suresecureivs.SimpleSettingValue();
            }
            input.ReadMessage(simpleVal_);
            break;
          }
          case 26: {
            if (polyVal_ == null) {
              polyVal_ = new global::Suresecureivs.PolySettingValue();
            }
            input.ReadMessage(polyVal_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingItemValueWithName : pb::IMessage<SettingItemValueWithName> {
    private static readonly pb::MessageParser<SettingItemValueWithName> _parser = new pb::MessageParser<SettingItemValueWithName>(() => new SettingItemValueWithName());
    public static pb::MessageParser<SettingItemValueWithName> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SettingItemValueWithName() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SettingItemValueWithName(SettingItemValueWithName other) : this() {
      paramName_ = other.paramName_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    public SettingItemValueWithName Clone() {
      return new SettingItemValueWithName(this);
    }

    /// <summary>Field number for the "param_name" field.</summary>
    public const int ParamNameFieldNumber = 1;
    private string paramName_ = "";
    public string ParamName {
      get { return paramName_; }
      set {
        paramName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Suresecureivs.SettingItemValue value_;
    public global::Suresecureivs.SettingItemValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SettingItemValueWithName);
    }

    public bool Equals(SettingItemValueWithName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParamName != other.ParamName) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ParamName.Length != 0) hash ^= ParamName.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ParamName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParamName);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ParamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamName);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    public void MergeFrom(SettingItemValueWithName other) {
      if (other == null) {
        return;
      }
      if (other.ParamName.Length != 0) {
        ParamName = other.ParamName;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Suresecureivs.SettingItemValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ParamName = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Suresecureivs.SettingItemValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingItemDesc : pb::IMessage<SettingItemDesc> {
    private static readonly pb::MessageParser<SettingItemDesc> _parser = new pb::MessageParser<SettingItemDesc>(() => new SettingItemDesc());
    public static pb::MessageParser<SettingItemDesc> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SettingItemDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SettingItemDesc(SettingItemDesc other) : this() {
      name_ = other.name_;
      comment_ = other.comment_;
      settingType_ = other.settingType_;
      upper_ = other.upper_;
      lower_ = other.lower_;
      choice_ = other.choice_.Clone();
      Val = other.val_ != null ? other.Val.Clone() : null;
    }

    public SettingItemDesc Clone() {
      return new SettingItemDesc(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 2;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setting_type" field.</summary>
    public const int SettingTypeFieldNumber = 3;
    private global::Suresecureivs.SettingType settingType_ = 0;
    public global::Suresecureivs.SettingType SettingType {
      get { return settingType_; }
      set {
        settingType_ = value;
      }
    }

    /// <summary>Field number for the "upper" field.</summary>
    public const int UpperFieldNumber = 4;
    private double upper_;
    public double Upper {
      get { return upper_; }
      set {
        upper_ = value;
      }
    }

    /// <summary>Field number for the "lower" field.</summary>
    public const int LowerFieldNumber = 5;
    private double lower_;
    public double Lower {
      get { return lower_; }
      set {
        lower_ = value;
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_choice_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> choice_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Choice {
      get { return choice_; }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 7;
    private global::Suresecureivs.SettingItemValue val_;
    public global::Suresecureivs.SettingItemValue Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SettingItemDesc);
    }

    public bool Equals(SettingItemDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Comment != other.Comment) return false;
      if (SettingType != other.SettingType) return false;
      if (Upper != other.Upper) return false;
      if (Lower != other.Lower) return false;
      if(!choice_.Equals(other.choice_)) return false;
      if (!object.Equals(Val, other.Val)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (SettingType != 0) hash ^= SettingType.GetHashCode();
      if (Upper != 0D) hash ^= Upper.GetHashCode();
      if (Lower != 0D) hash ^= Lower.GetHashCode();
      hash ^= choice_.GetHashCode();
      if (val_ != null) hash ^= Val.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comment);
      }
      if (SettingType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SettingType);
      }
      if (Upper != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Upper);
      }
      if (Lower != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Lower);
      }
      choice_.WriteTo(output, _repeated_choice_codec);
      if (val_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Val);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (SettingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SettingType);
      }
      if (Upper != 0D) {
        size += 1 + 8;
      }
      if (Lower != 0D) {
        size += 1 + 8;
      }
      size += choice_.CalculateSize(_repeated_choice_codec);
      if (val_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Val);
      }
      return size;
    }

    public void MergeFrom(SettingItemDesc other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.SettingType != 0) {
        SettingType = other.SettingType;
      }
      if (other.Upper != 0D) {
        Upper = other.Upper;
      }
      if (other.Lower != 0D) {
        Lower = other.Lower;
      }
      choice_.Add(other.choice_);
      if (other.val_ != null) {
        if (val_ == null) {
          val_ = new global::Suresecureivs.SettingItemValue();
        }
        Val.MergeFrom(other.Val);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Comment = input.ReadString();
            break;
          }
          case 24: {
            settingType_ = (global::Suresecureivs.SettingType) input.ReadEnum();
            break;
          }
          case 33: {
            Upper = input.ReadDouble();
            break;
          }
          case 41: {
            Lower = input.ReadDouble();
            break;
          }
          case 50: {
            choice_.AddEntriesFrom(input, _repeated_choice_codec);
            break;
          }
          case 58: {
            if (val_ == null) {
              val_ = new global::Suresecureivs.SettingItemValue();
            }
            input.ReadMessage(val_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeriodIdx : pb::IMessage<PeriodIdx> {
    private static readonly pb::MessageParser<PeriodIdx> _parser = new pb::MessageParser<PeriodIdx>(() => new PeriodIdx());
    public static pb::MessageParser<PeriodIdx> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeriodIdx() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeriodIdx(PeriodIdx other) : this() {
      idx_ = other.idx_;
    }

    public PeriodIdx Clone() {
      return new PeriodIdx(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private int idx_;
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PeriodIdx);
    }

    public bool Equals(PeriodIdx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Idx != 0) hash ^= Idx.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Idx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      return size;
    }

    public void MergeFrom(PeriodIdx other) {
      if (other == null) {
        return;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 对应单个时间段的参数集合
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeriodParams : pb::IMessage<PeriodParams> {
    private static readonly pb::MessageParser<PeriodParams> _parser = new pb::MessageParser<PeriodParams>(() => new PeriodParams());
    public static pb::MessageParser<PeriodParams> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeriodParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeriodParams(PeriodParams other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      enabled_ = other.enabled_;
      params_ = other.params_.Clone();
    }

    public PeriodParams Clone() {
      return new PeriodParams(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private long startTime_;
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private long endTime_;
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 3;
    private bool enabled_;
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingItemDesc> _repeated_params_codec
        = pb::FieldCodec.ForMessage(34, global::Suresecureivs.SettingItemDesc.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> params_ = new pbc::RepeatedField<global::Suresecureivs.SettingItemDesc>();
    public pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> Params {
      get { return params_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PeriodParams);
    }

    public bool Equals(PeriodParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Enabled != other.Enabled) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndTime);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    public void MergeFrom(PeriodParams other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      params_.Add(other.params_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTime = input.ReadInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadInt64();
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 34: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModuleDesc : pb::IMessage<ModuleDesc> {
    private static readonly pb::MessageParser<ModuleDesc> _parser = new pb::MessageParser<ModuleDesc>(() => new ModuleDesc());
    public static pb::MessageParser<ModuleDesc> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ModuleDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ModuleDesc(ModuleDesc other) : this() {
      name_ = other.name_;
      index_ = other.index_;
      enabled_ = other.enabled_;
      activePeriodIdx_ = other.activePeriodIdx_;
      periodParams_ = other.periodParams_.Clone();
    }

    public ModuleDesc Clone() {
      return new ModuleDesc(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 3;
    private bool enabled_;
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "active_period_idx" field.</summary>
    public const int ActivePeriodIdxFieldNumber = 4;
    private int activePeriodIdx_;
    public int ActivePeriodIdx {
      get { return activePeriodIdx_; }
      set {
        activePeriodIdx_ = value;
      }
    }

    /// <summary>Field number for the "period_params" field.</summary>
    public const int PeriodParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Suresecureivs.PeriodParams> _repeated_periodParams_codec
        = pb::FieldCodec.ForMessage(42, global::Suresecureivs.PeriodParams.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.PeriodParams> periodParams_ = new pbc::RepeatedField<global::Suresecureivs.PeriodParams>();
    public pbc::RepeatedField<global::Suresecureivs.PeriodParams> PeriodParams {
      get { return periodParams_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ModuleDesc);
    }

    public bool Equals(ModuleDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Index != other.Index) return false;
      if (Enabled != other.Enabled) return false;
      if (ActivePeriodIdx != other.ActivePeriodIdx) return false;
      if(!periodParams_.Equals(other.periodParams_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ActivePeriodIdx != 0) hash ^= ActivePeriodIdx.GetHashCode();
      hash ^= periodParams_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      if (ActivePeriodIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActivePeriodIdx);
      }
      periodParams_.WriteTo(output, _repeated_periodParams_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (ActivePeriodIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivePeriodIdx);
      }
      size += periodParams_.CalculateSize(_repeated_periodParams_codec);
      return size;
    }

    public void MergeFrom(ModuleDesc other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ActivePeriodIdx != 0) {
        ActivePeriodIdx = other.ActivePeriodIdx;
      }
      periodParams_.Add(other.periodParams_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 32: {
            ActivePeriodIdx = input.ReadInt32();
            break;
          }
          case 42: {
            periodParams_.AddEntriesFrom(input, _repeated_periodParams_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PortDesc : pb::IMessage<PortDesc> {
    private static readonly pb::MessageParser<PortDesc> _parser = new pb::MessageParser<PortDesc>(() => new PortDesc());
    public static pb::MessageParser<PortDesc> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PortDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PortDesc(PortDesc other) : this() {
      name_ = other.name_;
      num_ = other.num_;
      type_ = other.type_;
      modules_ = other.modules_.Clone();
      params_ = other.params_.Clone();
    }

    public PortDesc Clone() {
      return new PortDesc(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Suresecureivs.PortDesc.Types.Type type_ = 0;
    public global::Suresecureivs.PortDesc.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Suresecureivs.ModuleDesc> _repeated_modules_codec
        = pb::FieldCodec.ForMessage(34, global::Suresecureivs.ModuleDesc.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.ModuleDesc> modules_ = new pbc::RepeatedField<global::Suresecureivs.ModuleDesc>();
    public pbc::RepeatedField<global::Suresecureivs.ModuleDesc> Modules {
      get { return modules_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingItemDesc> _repeated_params_codec
        = pb::FieldCodec.ForMessage(42, global::Suresecureivs.SettingItemDesc.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> params_ = new pbc::RepeatedField<global::Suresecureivs.SettingItemDesc>();
    public pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> Params {
      get { return params_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PortDesc);
    }

    public bool Equals(PortDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Num != other.Num) return false;
      if (Type != other.Type) return false;
      if(!modules_.Equals(other.modules_)) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= modules_.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      modules_.WriteTo(output, _repeated_modules_codec);
      params_.WriteTo(output, _repeated_params_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += modules_.CalculateSize(_repeated_modules_codec);
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    public void MergeFrom(PortDesc other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      modules_.Add(other.modules_);
      params_.Add(other.params_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::Suresecureivs.PortDesc.Types.Type) input.ReadEnum();
            break;
          }
          case 34: {
            modules_.AddEntriesFrom(input, _repeated_modules_codec);
            break;
          }
          case 42: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PortDesc message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("INV")] Inv = 0,
        [pbr::OriginalName("DEP")] Dep = 1,
        [pbr::OriginalName("RGB")] Rgb = 2,
        [pbr::OriginalName("NODE")] Node = 3,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NodeDesc : pb::IMessage<NodeDesc> {
    private static readonly pb::MessageParser<NodeDesc> _parser = new pb::MessageParser<NodeDesc>(() => new NodeDesc());
    public static pb::MessageParser<NodeDesc> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NodeDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NodeDesc(NodeDesc other) : this() {
      params_ = other.params_.Clone();
      ports_ = other.ports_.Clone();
    }

    public NodeDesc Clone() {
      return new NodeDesc(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingItemDesc> _repeated_params_codec
        = pb::FieldCodec.ForMessage(10, global::Suresecureivs.SettingItemDesc.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> params_ = new pbc::RepeatedField<global::Suresecureivs.SettingItemDesc>();
    public pbc::RepeatedField<global::Suresecureivs.SettingItemDesc> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Suresecureivs.PortDesc> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(18, global::Suresecureivs.PortDesc.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.PortDesc> ports_ = new pbc::RepeatedField<global::Suresecureivs.PortDesc>();
    public pbc::RepeatedField<global::Suresecureivs.PortDesc> Ports {
      get { return ports_; }
    }

    public override bool Equals(object other) {
      return Equals(other as NodeDesc);
    }

    public bool Equals(NodeDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!params_.Equals(other.params_)) return false;
      if(!ports_.Equals(other.ports_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= params_.GetHashCode();
      hash ^= ports_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _repeated_params_codec);
      ports_.WriteTo(output, _repeated_ports_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_repeated_params_codec);
      size += ports_.CalculateSize(_repeated_ports_codec);
      return size;
    }

    public void MergeFrom(NodeDesc other) {
      if (other == null) {
        return;
      }
      params_.Add(other.params_);
      ports_.Add(other.ports_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 18: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// }
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetModuleStatusRequest : pb::IMessage<SetModuleStatusRequest> {
    private static readonly pb::MessageParser<SetModuleStatusRequest> _parser = new pb::MessageParser<SetModuleStatusRequest>(() => new SetModuleStatusRequest());
    public static pb::MessageParser<SetModuleStatusRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SetModuleStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SetModuleStatusRequest(SetModuleStatusRequest other) : this() {
      SetTarget = other.setTarget_ != null ? other.SetTarget.Clone() : null;
      enabled_ = other.enabled_;
    }

    public SetModuleStatusRequest Clone() {
      return new SetModuleStatusRequest(this);
    }

    /// <summary>Field number for the "set_target" field.</summary>
    public const int SetTargetFieldNumber = 1;
    private global::Suresecureivs.SetTarget setTarget_;
    public global::Suresecureivs.SetTarget SetTarget {
      get { return setTarget_; }
      set {
        setTarget_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// int32 param_set_idx = 2;
    /// </summary>
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SetModuleStatusRequest);
    }

    public bool Equals(SetModuleStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SetTarget, other.SetTarget)) return false;
      if (Enabled != other.Enabled) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (setTarget_ != null) hash ^= SetTarget.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (setTarget_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SetTarget);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (setTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetTarget);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(SetModuleStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.setTarget_ != null) {
        if (setTarget_ == null) {
          setTarget_ = new global::Suresecureivs.SetTarget();
        }
        SetTarget.MergeFrom(other.SetTarget);
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (setTarget_ == null) {
              setTarget_ = new global::Suresecureivs.SetTarget();
            }
            input.ReadMessage(setTarget_);
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetTarget : pb::IMessage<SetTarget> {
    private static readonly pb::MessageParser<SetTarget> _parser = new pb::MessageParser<SetTarget>(() => new SetTarget());
    public static pb::MessageParser<SetTarget> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SetTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SetTarget(SetTarget other) : this() {
      scope_ = other.scope_;
      port_ = other.port_;
      module_ = other.module_;
      modulePeriodIdx_ = other.modulePeriodIdx_;
    }

    public SetTarget Clone() {
      return new SetTarget(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private global::Suresecureivs.SCOPE scope_ = 0;
    public global::Suresecureivs.SCOPE Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 3;
    private int module_;
    public int Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "module_period_idx" field.</summary>
    public const int ModulePeriodIdxFieldNumber = 4;
    private int modulePeriodIdx_;
    public int ModulePeriodIdx {
      get { return modulePeriodIdx_; }
      set {
        modulePeriodIdx_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SetTarget);
    }

    public bool Equals(SetTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Scope != other.Scope) return false;
      if (Port != other.Port) return false;
      if (Module != other.Module) return false;
      if (ModulePeriodIdx != other.ModulePeriodIdx) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Scope != 0) hash ^= Scope.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Module != 0) hash ^= Module.GetHashCode();
      if (ModulePeriodIdx != 0) hash ^= ModulePeriodIdx.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Scope != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Scope);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Module != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Module);
      }
      if (ModulePeriodIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ModulePeriodIdx);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Scope != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Scope);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Module != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Module);
      }
      if (ModulePeriodIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModulePeriodIdx);
      }
      return size;
    }

    public void MergeFrom(SetTarget other) {
      if (other == null) {
        return;
      }
      if (other.Scope != 0) {
        Scope = other.Scope;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Module != 0) {
        Module = other.Module;
      }
      if (other.ModulePeriodIdx != 0) {
        ModulePeriodIdx = other.ModulePeriodIdx;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            scope_ = (global::Suresecureivs.SCOPE) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            Module = input.ReadInt32();
            break;
          }
          case 32: {
            ModulePeriodIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReinitRequest : pb::IMessage<ReinitRequest> {
    private static readonly pb::MessageParser<ReinitRequest> _parser = new pb::MessageParser<ReinitRequest>(() => new ReinitRequest());
    public static pb::MessageParser<ReinitRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReinitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReinitRequest(ReinitRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      frames_ = other.frames_;
    }

    public ReinitRequest Clone() {
      return new ReinitRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Suresecureivs.SetTarget target_;
    public global::Suresecureivs.SetTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private int frames_;
    public int Frames {
      get { return frames_; }
      set {
        frames_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ReinitRequest);
    }

    public bool Equals(ReinitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (Frames != other.Frames) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (Frames != 0) hash ^= Frames.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (Frames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frames);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (Frames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frames);
      }
      return size;
    }

    public void MergeFrom(ReinitRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Suresecureivs.SetTarget();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.Frames != 0) {
        Frames = other.Frames;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Suresecureivs.SetTarget();
            }
            input.ReadMessage(target_);
            break;
          }
          case 16: {
            Frames = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetParamRequest : pb::IMessage<SetParamRequest> {
    private static readonly pb::MessageParser<SetParamRequest> _parser = new pb::MessageParser<SetParamRequest>(() => new SetParamRequest());
    public static pb::MessageParser<SetParamRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SetParamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SetParamRequest(SetParamRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      settings_ = other.settings_.Clone();
      periodIdx_ = other.periodIdx_;
    }

    public SetParamRequest Clone() {
      return new SetParamRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Suresecureivs.SetTarget target_;
    public global::Suresecureivs.SetTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingItemValueWithName> _repeated_settings_codec
        = pb::FieldCodec.ForMessage(18, global::Suresecureivs.SettingItemValueWithName.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingItemValueWithName> settings_ = new pbc::RepeatedField<global::Suresecureivs.SettingItemValueWithName>();
    public pbc::RepeatedField<global::Suresecureivs.SettingItemValueWithName> Settings {
      get { return settings_; }
    }

    /// <summary>Field number for the "period_idx" field.</summary>
    public const int PeriodIdxFieldNumber = 3;
    private int periodIdx_;
    public int PeriodIdx {
      get { return periodIdx_; }
      set {
        periodIdx_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SetParamRequest);
    }

    public bool Equals(SetParamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if(!settings_.Equals(other.settings_)) return false;
      if (PeriodIdx != other.PeriodIdx) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      hash ^= settings_.GetHashCode();
      if (PeriodIdx != 0) hash ^= PeriodIdx.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      settings_.WriteTo(output, _repeated_settings_codec);
      if (PeriodIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PeriodIdx);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      size += settings_.CalculateSize(_repeated_settings_codec);
      if (PeriodIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeriodIdx);
      }
      return size;
    }

    public void MergeFrom(SetParamRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Suresecureivs.SetTarget();
        }
        Target.MergeFrom(other.Target);
      }
      settings_.Add(other.settings_);
      if (other.PeriodIdx != 0) {
        PeriodIdx = other.PeriodIdx;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Suresecureivs.SetTarget();
            }
            input.ReadMessage(target_);
            break;
          }
          case 18: {
            settings_.AddEntriesFrom(input, _repeated_settings_codec);
            break;
          }
          case 24: {
            PeriodIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
